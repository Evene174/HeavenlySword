/*
 * Copyright (c) 2003-2006 Sony Computer Entertainment.
 * Use and distribution without consent strictly prohibited.
 */

.include "globaldefines.spu"
.start
.include "conventions.inl"
.text

// void WwsJob_FreeLogicalBuffer( U32 logicalBufferSetNum, U32 logicalBufferNum )
.reg dmaTagId, dmaTagMask
.reg tmp, tmp2, tmp3
.reg tagMask, isDone
.reg buffer
.reg mask
// 13 GetLogicalBuffer outputs /
.reg Gbt_pBufferSet           20
.reg Gbt_bufferSet            21
.reg Gbt_bufferSetNr          22
.reg Gbt_firstPageNum         23
.reg Gbt_numPagesPerBuffer    24
.reg Gbt_numBuffers           25
.reg Gbt_pBuffers             26
.reg Gbt_bufferNum            27
.reg Gbt_pBuffer              28
.reg Gbt_buffer               29
.reg Gbt_bufferNr             30
.reg Gbt_bufferPageNum        31
.reg Gbt_pLogicalToBufferNums 32
////////////////////////////////
.extern g_WwsJob_runJobNum
.extern GetLogicalBuffer
.extern TryFreeTagAndUsedPages
.extern IsDmaTagMaskDone
.extern StoreAuditDataInitialNoParmsU64
.if	ASSERTS_ENABLED
.extern FreeLogicalBuffer_AssertBufferSet
.extern FreeLogicalBuffer_AssertBufferNum
.extern FreeLogicalBuffer_AssertNotShareableOrShared
.extern FreeLogicalBuffer_AssertUsed
.endif

.global WwsJob_FreeLogicalBuffer
WwsJob_FreeLogicalBuffer: // 24 instructions, 96 bytes
.if	ENABLE_IMPORTANT_AUDITS
		ila	$74, kWwsJob_FreeLogicalBuffer					shlqbyi	$75, $4, 1
		or	$75, $75, $5							brsl	$78, StoreAuditDataInitialNoParmsU64 [#StoreAuditDataInitialNoParmsU64CC]
.endif
		ila tmp, FlbEdi1							lqa $3, g_WwsJob_runJobNum
		ila dmaTagMask, 1							brsl $6, GetLogicalBuffer [#GetLogicalBufferCC]
		rotmi dmaTagId, Gbt_buffer, -22						hbra FlbBranch1, TryFreeTagAndUsedPages
		andi dmaTagId, dmaTagId, 0x1F						fsmbi mask, 0x00FF
.if	ASSERTS_ENABLED
.reg	mask_shareableBad, mask_used, mask_bufferNumBad 
		ilhu	mask_shareableBad, 0x5000					brz Gbt_bufferSet, FreeLogicalBuffer_AssertBufferSet
		ilhu	mask_used, 0x0800						lnop
		ceqi	mask_bufferNumBad, Gbt_bufferNum, 0xFF				{lnop}
		and	mask_shareableBad, Gbt_buffer, mask_shareableBad		{lnop}
		and	mask_used, Gbt_buffer, mask_used				brnz mask_bufferNumBad, FreeLogicalBuffer_AssertBufferNum
		{nop}									brnz mask_shareableBad, FreeLogicalBuffer_AssertNotShareableOrShared
		{nop}									brz mask_used, FreeLogicalBuffer_AssertUsed
.endif
		ila tmp2, FlbLoopExit							{lnop}
		ila tmp3, IsDmaTagMaskDone						{lnop}
FlbLoop:	shl $3, dmaTagMask, dmaTagId						bie tmp [FlbEdi1]
		//If we take the branch to FlbLoopExit, interrupts will be disabled
		//If we don't take the branch, then we'll be calling IsDmaTagMaskDone and can disable interrupts on that function call
FlbEdi1:	{nop}									bizd dmaTagId, tmp2 [FlbLoopExit]
		{nop}									bisld $4, tmp3 [#IsDmaTagMaskDoneCC]
		{nop}									brz $3, FlbLoop
FlbLoopExit:	{nop}									rotqby mask, mask, Gbt_pBuffer
		nop									rotqmbyi $3, Gbt_bufferSet, 0
		and buffer, Gbt_bufferNr, mask						rotqmbyi $4, Gbt_bufferNum, 0
		{nop}									rotqmbyi $5, Gbt_buffer, 0
		{nop}									stqd buffer, 0(Gbt_pBuffer)
		ai $6, $lr, 0						FlbBranch1:	br TryFreeTagAndUsedPages
.end
