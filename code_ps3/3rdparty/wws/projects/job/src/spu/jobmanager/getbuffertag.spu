/*
 * Copyright (c) 2003-2006 Sony Computer Entertainment.
 * Use and distribution without consent strictly prohibited.
 */

.include "globaldefines.spu"
.define ABIWRAPPER 0

.if ABIWRAPPER
.start
.include "conventions.inl"
.text
.extern GetBufferTag
.global WwsJob_GetBufferTag
WwsJob_GetBufferTag:
		ai $6, $5, 0								{lnop}
		ai $5, $4, 0								{lnop}
		ai $4, $3, 0								br GetBufferTag
.end
.endif

.start
.include "conventions.inl"
.text

// Note: This could be less latency...
// WwsJob_BufferTagEtc WwsJob_GetBufferTag( I32 jobNum, U32 logicalBufferSetNum, U32 logicalBufferNum, bool useDmaTagId )
// 13 GetLogicalBuffer outputs /
.reg Gbt_pBufferSet           20
.reg Gbt_bufferSet            21
.reg Gbt_bufferSetNr          22
.reg Gbt_firstPageNum         23
.reg Gbt_numPagesPerBuffer    24
.reg Gbt_numBuffers           25
.reg Gbt_pBuffers             26
.reg Gbt_bufferNum            27
.reg Gbt_pBuffer              28
.reg Gbt_buffer               29
.reg Gbt_bufferNr             30
.reg Gbt_bufferPageNum        31
.reg Gbt_pLogicalToBufferNums 32
////////////////////////////////
.reg useDmaTagId
.reg dmaTagId_, dmaTagId
.reg mask, mask2, mask3, mask4, mask5, mask6, mask7, mask8, mask9, mask10, mask11
.reg logicalBufferSetNum, logicalBufferNum
.reg bufferTag
.reg bufferPageNum
.reg buffer, bufferr, pBuffer
.reg mmAddress
.reg mmLength
.reg lsAddressInWords
.reg lsLengthInWords
.reg numPagesPerBuffer
.reg sharedToLaterJob
.reg loadJobNum
.reg pBufferSetArray
.reg loadJobBufferSet
.reg firstBufferNum
.reg loadJobBufferNum
.reg pBufferArray
.reg loadJobBuffer_
.reg loadJobBuffer
.reg pLoadJobBuffer
.extern g_WwsJob_bufferArray
.extern g_WwsJob_runJobNum
.extern g_WwsJob_loadJobNum
.extern GetLogicalBuffer
.extern UseDmaTagId
.extern StoreAuditDataInitialNoDataU64
.extern StoreAuditDataInitialU64
.extern	StoreAuditDataParameterU64
.if	ASSERTS_ENABLED
.extern GetBufferTag_AssertBufferSet
.extern GetBufferTag_AssertBuffer
.extern GetBufferTag_AssertLogicalBufferNum
.extern GetBufferTag_AssertNotReserved
.extern GetBufferTag_AssertBufferNum
.endif

.global GetBufferTag
GetBufferTag: // 62 instructions, 248 bytes, ~138 cycles if not shared, +~63 cycles if shared
.if	ENABLE_IMPORTANT_AUDITS
.reg	sel_aBCD
		ila	$74, kWwsJob_GetBufferTag					rotqbyi	$75, $4{logicalBufferSetNum}, 0
		ila	$76, 1								brsl	$78, StoreAuditDataInitialU64 [#StoreAuditDataInitialU64CC]
		{nop}									fsmbi	sel_aBCD, 0xF000
		{nop}									rotqmbyi $74, $6{useDmaTagId}, -4
		selb	$74, $74, $5{logicalBufferNum}, sel_aBCD			brsl	$78, StoreAuditDataParameterU64 [#StoreAuditDataParameterU64CC]
.endif
		ai useDmaTagId, $6, 0							hbra GbtBranch1, GetLogicalBuffer
		ilhu mask9, 0x1000							rotqbyi logicalBufferNum, $5, 2
		ila mask10, 0x3FFF							rotqbyi logicalBufferSetNum, $4, 3
		ilhu mask, 0x07C0							fsmbi mask2, 0x4000
		{nop}									lqa $3, g_WwsJob_runJobNum
		{nop}									fsmbi mask4, 0x00F0
		{nop}									fsmbi mask5, 0x000F
		{nop}									fsmbi mask6, 0x0C00
		selb bufferTag, logicalBufferSetNum, logicalBufferNum, mask2		fsmbi mask7, 0x0300
		{nop}							GbtBranch1:	brsl $6, GetLogicalBuffer [#GetLogicalBufferCC]
		{nop}									hbra GbtBranch2, GbtNotShared
.if	ASSERTS_ENABLED
.reg	bufferSetNum, mask_reserved, mask_logicalBufferNumOk, mask_bufferSetNumOk, mask_bufferNumBad
		ilhu	mask_reserved, 0x8000						rotqbyi	bufferSetNum, Gbt_buffer, 4
		cgt	mask_logicalBufferNumOk, Gbt_numBuffers, $5{logicalBufferNum}	brz Gbt_bufferSet, GetBufferTag_AssertBufferSet
		and	mask_reserved, Gbt_buffer, mask_reserved			brz Gbt_buffer, GetBufferTag_AssertBuffer
		ceqi	mask_bufferNumBad, Gbt_bufferNum, 0xFF				brz mask_logicalBufferNumOk, GetBufferTag_AssertLogicalBufferNum
		nop									brnz mask_bufferNumBad, GetBufferTag_AssertBufferNum
		andi	bufferSetNum, bufferSetNum, 0xF					brnz mask_reserved, GetBufferTag_AssertNotReserved
		ceq	mask_bufferSetNumOk, bufferSetNum, $4{logicalBufferSetNum}	brz mask_bufferSetNumOk, GetBufferTag_AssertBuffer
.endif
		and sharedToLaterJob, Gbt_buffer, mask9					rotqbyi mmLength, Gbt_buffer, 3
		{nop}									rotqbyi mmAddress, Gbt_buffer, 12
		{nop}									rotqbyi lsAddressInWords, Gbt_bufferPageNum, 15
		{nop}									rotqbyi lsLengthInWords, Gbt_numPagesPerBuffer, 13
		and mmLength, mmLength, mask10						{lnop}
		andi mmAddress, mmAddress, -16						{lnop}
		shli mmLength, mmLength, 4						{lnop}
		selb bufferTag, bufferTag, mmAddress, mask4				{lnop}
		selb bufferTag, bufferTag, mmLength, mask5				{lnop}
		selb bufferTag, bufferTag, lsAddressInWords, mask6			{lnop}
		selb bufferTag, bufferTag, lsLengthInWords, mask7	GbtBranch2:	brz sharedToLaterJob, GbtNotShared
GbtShared:	{nop}									lqa loadJobNum, g_WwsJob_loadJobNum
		ila pBufferSetArray, g_WwsJob_bufferSetArray				{lnop}				
		shli loadJobNum, loadJobNum, 6						{lnop}
		shli logicalBufferSetNum, logicalBufferSetNum, 2			{lnop}
		a pBufferSetArray, pBufferSetArray, loadJobNum				lqx loadJobBufferSet, pBufferSetArray, logicalBufferSetNum
		a pBufferSetArray, pBufferSetArray, logicalBufferSetNum			rotqby loadJobBufferSet, loadJobBufferSet, pBufferSetArray
		andi firstBufferNum, loadJobBufferSet, 0xFF				{lnop}
		a loadJobBufferNum, firstBufferNum, Gbt_bufferNum			{lnop}
		ila pBufferArray, g_WwsJob_bufferArray					{lnop}
		shli loadJobBufferNum, loadJobBufferNum, 3				lqx loadJobBuffer_, pBufferArray, loadJobBufferNum  
		a Gbt_pBuffer, pBufferArray, loadJobBufferNum				rotqby Gbt_buffer, loadJobBuffer_, Gbt_pBuffer
GbtNotShared:	and dmaTagId_, Gbt_buffer, mask						hbrr	Gbt_Call_UseDmaTagId, UseDmaTagId
		rotmi dmaTagId, dmaTagId_,  -22						fsmbi mask3, 0x3000
		ceqi mask8, dmaTagId_, 0						fsmbi mask11, 0xF000
		and mask, mask, mask11							{lnop}
		and mask8, useDmaTagId, mask8						{lnop}
		selb bufferTag, bufferTag, dmaTagId, mask3                              brz mask8, GbtCond1
		{nop}						Gbt_Call_UseDmaTagId:	brsl $4, UseDmaTagId [#UseDmaTagIdCC]
		{nop}									hbr	GbtBranch3, $lr
.reg dirtyQword
.reg shuffMask
		// *WARNING*
		//The call to UseDmaTagId could potentially have allowed an interrupt to fire internally
		//which means that the other WwsJob_Buffer in the same qword as this one might have modified
		//This means that the store back of this WwsJob_Buffer can't assume anything about the other half
		//of the qword so *must* do a read-modify-write in order to store the dword.
		roti	dmaTagId_, $3, 22						lqd	dirtyQword, 0(Gbt_pBuffer)
		selb	bufferTag, bufferTag, $3, mask3					cdd	shuffMask, 0(Gbt_pBuffer)
		selb	Gbt_buffer, Gbt_buffer, dmaTagId_, mask				shufb	Gbt_buffer, Gbt_buffer, dirtyQword, shuffMask		//rotqby Gbt_buffer, Gbt_buffer, Gbt_pBuffer
		nop									stqd	Gbt_buffer, 0(Gbt_pBuffer)
GbtCond1:	
.if	ENABLE_IMPORTANT_AUDITS
.reg	sel_aBCD
		ila	$74, kWwsJob_GetBufferTag_returnBufTag				fsmbi	$75, 0
		ila	$76, 2								brsl	$78, StoreAuditDataInitialU64 [#StoreAuditDataInitialU64CC]
		ai	$74, bufferTag, 0						brsl	$78, StoreAuditDataParameterU64 [#StoreAuditDataParameterU64CC]
		{nop}									rotqbyi	$74, bufferTag, 8
		{nop}									brsl	$78, StoreAuditDataParameterU64 [#StoreAuditDataParameterU64CC]
.endif
		ai $3, bufferTag, 0					GbtBranch3:	bi $lr
.end
