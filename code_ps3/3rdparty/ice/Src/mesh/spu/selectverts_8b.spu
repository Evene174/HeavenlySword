;
; Copyright (c) 2005 Naughty Dog, Inc.
; A Wholly Owned Subsidiary of Sony Computer Entertainment, Inc.
; Use and distribution without consent strictly prohibited
;

.start

.define TEST 0

.global SelectVerts8Byte
; void SelectVerts8Byte(U8 *pSrc, U8 *pDst, U16 *pIndexes, U32 numVerts);
;
; pIndexes is a pointer a reindex table, while numVerts is the number of entries in this table.
; Each value in the reindex table refers to a vertex in the vertex buffers pointed to by pSrc.
; For each value in the reindex table, the appropriate vertex is read in from the vertex buffer and
; placed in sequence in the destination buffer, pointed to by pDst.  Thus, by using the reindex table
; a vertex buffer can be trimmed of unneeded vertexes.
; NOTE: The values in the reindex table have been multiplied by 16.
;
; This routine handles vertexs that are 8 bytes in size.  A multiple of four vertexes are always output,
; so the last vertexes in the output buffer may be garbage.



.text

; Parameters
.reg pSrc		3	; Must be 16 byte aligned.
.reg pDst		4	; Must be 16 byte aligned.
.reg pIndexes		5	; Must be 8 byte aligned.
.reg numVerts		6	; Can be any value, but will be automatically rounded up to a multiple of 4.

.reg inData0			; Input data for vertex 0.
.reg inData1			; Input data for vertex 1.
.reg inData2			; Input data for vertex 2.
.reg inData3			; Input data for vertex 3.
.reg index0			; The first index turned into the correct byte offset (index * 8).
.reg index1			; The second index turned into the correct byte offset (index * 8).
.reg index1Rot			; index1 + 8.  Used to rotate the input data into the correct fields.
.reg index2			; The third index turned into the correct byte offset (index * 8).
.reg index3			; The fourth index turned into the correct byte offset (index * 8).
.reg index3Rot			; index3 + 8.  Used to rotate the input data into the correct fields.
.reg indexes			; A quadword of indexes.
.reg loopCount
.reg outData0			; Output data for vertexes 0 and 1: x0 y0 x1 y1.
.reg outData1			; Output data for vertexes 2 and 3: x2 y2 x3 y3.
.reg pDst_			; Destination pointer delay.
.reg rotData0			; Vertex 0 data rotated into the correct field: x0 y0 -- --.
.reg rotData1			; Vertex 1 data rotated into the correct field: -- -- x1 y1.
.reg rotData2			; Vertex 2 data rotated into the correct field: x2 y2 -- --.
.reg rotData3			; Vertex 3 data rotated into the correct field: -- -- x3 y3.
.reg sel_ABcd			; Mask to select together vertex data.

.align 7

SelectVerts8Byte:
	{nop}							{o6 0}	lqd	indexes, 0x00(pIndexes)
	{nop}							{o?}	biz	numVerts, $lr
	{nop}							{o}	hbrr	sv_8_branch, sv_8_loop
	{nop}							{o4}	fsmbi	sel_ABcd, 0x00FF
	{nop}								{lnop}
	{nop}								{lnop}
{e2}	ai	loopCount, numVerts, 7				{o4 0}	rotqby	indexes, indexes, pIndexes
{e2 0}	ai	pIndexes, pIndexes, 8					{lnop}
{e4}	rotmi	loopCount, loopCount, -2				{lnop}
{e2}	ori	pDst_, pDst, 0						lnop
.cset inData0, inData1, inData2, inData3
.cset index0, index1Rot, index2, index3

sv_8_loop:
{e4 1}	rothmi	index1, indexes, -1				{o4 2}	rotqby	rotData1, inData1, index1Rot
{e2 2}	ahi	index3Rot, index3, 8				{o4 2}	rotqby	rotData0, inData0, index0
	{nop}							{o6 0}	lqd	indexes, 0x00(pIndexes)
	{nop}							{o4 2}	rotqby	rotData3, inData3, index3Rot
{e4 1}	roti	index0, index1, 16				{o4 1}	rotqbyi	index3, index1, 4
{e2 2}	selb	outData0, rotData0, rotData1, sel_ABcd		{o4 2}	rotqby	rotData2, inData2, index2
	nop							{o6 1}	lqx	inData1, pSrc, index1
{e2 2}	ai	loopCount, loopCount, -1			{o6 2}	stqd	outData0, 0x00(pDst)
{e4 1}	roti	index2, index3, 16				{o4 0}	rotqby	indexes, indexes, pIndexes
{e2 2}	selb	outData1, rotData2, rotData3, sel_ABcd		{o6 1}	lqx	inData0, pSrc, index0
{e2 0}	ai	pIndexes, pIndexes, 8				{o6 1}	lqx	inData3, pSrc, index3
{e2 1}	ahi	index1Rot, index1, 8				{o6 2}	stqd	outData1, 0x10(pDst)
{e2 2}	ori	pDst, pDst_, 0					{o6 1}	lqx	inData2, pSrc, index2
{e2 1}	ai	pDst_, pDst_, 0x20		sv_8_branch:	{o? 2}	brnz	loopCount, sv_8_loop

	nop							{o?}	bi	$lr



.if 0
; Unrolled loop

; Load four indexes and place them into the first four halfword fields, and increment the index pointer.
	nop							{o6 0}	lqd	indexes, 0x00(pIndexes)
{e2 0}	ai	pIndexes, pIndexes, 8					lnop
	nop								lnop
	nop								lnop
	nop								lnop
	nop								lnop
	nop							{o4 0}	rotqby	indexes, indexes, pIndexes
	nop								lnop
	nop								lnop
	nop								lnop

; The indexes are stored as index * 16, but we need index * 8, so we compute (index >> 1)
{e4 1}	rothmi	index1, indexes, -1					lnop
	nop								lnop
	nop								lnop
	nop								lnop

; Now index1 is in the preferred halfword, so get the other three indexes into preferred halfwords too.
{e4 1}	roti	index0, index1, 16				{o4 1}	rotqbyi	index3, index1, 4
	nop								lnop
	nop								lnop
	nop								lnop
{e4 1}	roti	index2, index3, 16					lnop

; Load the four vertexes.
	nop							{o6 1}	lqx	inData1, pSrc, index1
	nop							{o6 1}	lqx	inData0, pSrc, index0
	nop							{o6 1}	lqx	inData3, pSrc, index3
	nop							{o6 1}	lqx	inData2, pSrc, index2

; In order to get the four vertexs into one output quadword, we first need to get the vertexs into distinct fields as follows:
; 	x0 y0 -- --
; 	-- -- x1 y1
; 	x2 y2 -- --
; 	-- -- x3 y3
; If the vertex data is in the preferred double word, then we can get this by rotating vertex 1 and 3 by 8 bytes.
; However, we can rotate directly to the correct spot by adding 8 to indexes 1 and 3.
{e2 1}	ahi	index1, index1, 8					lnop
{e2 2}	ahi	index3, index3, 8					lnop

; Rotate the four vertexes into the fields as stated above.
	nop							{o4 2}	rotqby	rotData1, inData1, index1
	nop							{o4 2}	rotqby	rotData0, inData0, index0
	nop							{o4 2}	rotqby	rotData3, inData3, index3
	nop							{o4 2}	rotqby	rotData2, inData2, index2
	nop								lnop
	nop								lnop

; Select the four rotated vertexes together to get the following:
;	x0 y0 x1 y1
;	x2 y2 x3 y3
{e2 2}	selb	outData0, rotData0, rotData1, sel_ABcd			lnop
{e2 2}	selb	outData1, rotData2, rotData3, sel_ABcd			lnop

; Store the four vertexes into the output buffer and increment the pointer.
	nop							{o6 2}	stqd	outData0, 0x00(pDst)
	nop							{o6 2}	stqd	outData1, 0x10(pDst)
{e2 2}	ai	pDst, pDst, 0x20				

; Decrement loop counter and test for exit.
{e2 2}	ai	loopCount, loopCount, -1				lnop
	nop								lnop
	nop					sv_8_branch:	{o? 2}	brnz	loopCount, sv_8_loop
.endif



.if TEST

.data

.align 12

m_outD:		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw	0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead

m_inD:		.dw 0x00000000, 0x10000000
		.dw 0x00000001, 0x10000001
		.dw 0x00000002, 0x10000002
		.dw 0x00000003, 0x10000003
		.dw 0x00000004, 0x10000004
		.dw 0x00000005, 0x10000005
		.dw 0x00000006, 0x10000006
		.dw 0x00000007, 0x10000007
		.dw 0x00000008, 0x10000008
		.dw 0x00000009, 0x10000009
		.dw 0x0000000A, 0x1000000A
		.dw 0x0000000B, 0x1000000B
		.dw 0x0000000C, 0x1000000C
		.dw 0x0000000D, 0x1000000D
		.dw 0x0000000E, 0x1000000E
		.dw 0x0000000F, 0x1000000F

; Test rename table
; Essentially Reverse the List, Stripping out 5 & 10, and placing them at the end
m_inRT:		.dh 0xB0, 0x90, 0x80, 0x70, 0x60, 0x40, 0x30, 0x20
		.dh 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xA0

m_NumElems:	.dw 16, 0, 0, 0		// 16 elements in the rename table



.text

.global _start
_start:
{e2}	ila	pSrc, m_inD					{o6}	lqr	numVerts, m_NumElems
{e2}	ila	pDst, m_outD						lnop
{e2}	ila	pIndexes, m_inRT				{o?}	brsl	$lr, SelectVerts8Byte	[#func]
	nop								stop

.endif

.end

