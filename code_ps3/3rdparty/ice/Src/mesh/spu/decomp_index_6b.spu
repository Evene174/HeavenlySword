;
; Copyright (c) 2005 Naughty Dog, Inc.
; A Wholly Owned Subsidiary of Sony Computer Entertainment, Inc.
; Use and distribution without consent strictly prohibited
;

.start

.define TEST 0

.global DecompressIndexes6Byte
;; Implements DecompressIndexes6Byte() ice/mesh/icemeshdecompress.cpp
;; void DecompressIndexes6Byte(U16 *in, U16 *out, U32 numTris);
;;
;; Decompress a 6 byte index stream to an 8 byte index stream by essentially aligning each 3 index tupple on an
;; 8 byte boundary.  Indexes are 16 bits in size.  The last byte of every index tupple is a replicant of the first.

.data
;; Program data
.extern m_ABCADEFD 

.text
.reg pSrc		3	;; Must be 4 byte aligned
.reg pDst		4	;; Must be 16 byte aligned
.reg count		5

.reg dstStrideAdd		;; Used to delay writing real data until second loop iteration
.reg inIndex0			;; First quadword of source data
.reg inIndex1			;; Second quadword of source data
.reg inIndex2			;; Third quadword of source data
.reg loopCount
.reg outIndex0			;; First quadword written
.reg outIndex1			;; Second quadword written
.reg outIndex2			;; Third quadword written
.reg outIndex3			;; Fourth quadwork written
.reg s_ABCADEFD			;; Shuffle mask for first row of loaded indexes
.reg s_CDECFGHF			;; Shuffle mask for fourth row of loaded indexes
.reg s_EFGEHabH			;; Shuffle mask for third row of loaded indexes
.reg s_GHaGbcdb			;; Shuffle mask for second row of loaded indexes
.reg shufOffset			;; Used to build similar shuffle masks based off of one bit pattern

.align 7

DecompressIndexes6Byte:
;; Notes:
;;
;; i	initialization, not part of the loop and the same value is stored in the destination register each loop iteration

{e2}	ai	loopCount, count, 15					{o}	hbrr	decomp_6b_index_branch, decomp_6b_index_loop
{e2}	il	dstStrideAdd, 0						{o6}	lqr	s_ABCADEFD, m_ABCADEFD
{e4}	rotmi	loopCount, loopCount, -3				{o?}	biz	count, $lr
.cset outIndex0, outIndex1, outIndex2, outIndex3

decomp_6b_index_loop:
	nop								{o6 1}	lqd	inIndex0, 0x00(pSrc)
{e2 i1}	ilh	shufOffset, 0x0404					{o6 1}	lqd	inIndex1, 0x10(pSrc)
	{nop}								{o6 1}	lqd	inIndex2, 0x20(pSrc)
	{nop}								{o6 2}	stqd	outIndex0, 0x00(pDst)
{e2 i2}	a	s_CDECFGHF, s_ABCADEFD, shufOffset			{o6 2}	stqd	outIndex1, 0x10(pDst)
{e2 1}	ai	loopCount, loopCount, -1				{o6 2}	stqd	outIndex2, 0x20(pDst)
{e2 i3}	a	s_EFGEHabH, s_CDECFGHF, shufOffset			{o6 2}	stqd	outIndex3, 0x30(pDst)
{e2 1}	ai	pSrc, pSrc, 0x30					{o4 1}	shufb	outIndex0, inIndex0, inIndex0, s_ABCADEFD
{e2 i4}	a	s_GHaGbcdb, s_EFGEHabH, shufOffset			{o4 1}	shufb	outIndex3, inIndex2, inIndex2, s_CDECFGHF
{e2 1}	a	pDst, pDst, dstStrideAdd				{o4 1}	shufb	outIndex2, inIndex1, inIndex2, s_EFGEHabH
{e2 1}	il	dstStrideAdd, 0x40					{o4 1}	shufb	outIndex1, inIndex0, inIndex1, s_GHaGbcdb
	{nop}					decomp_6b_index_branch:	{o? 1}	brnz	loopCount, decomp_6b_index_loop

	{nop}								{o?}	bi	$lr

.if 0
;; unrolled loop -- for documentation purposes only; does not actually work
decomp_6b_index_loop:
	;; load the source index data
	nop								lqd	inIndex0, 0x00(pSrc)
	nop								lqd	inIndex1, 0x10(pSrc)
	nop								lqd	inIndex2, 0x20(pSrc)

	;; Increment counter and source pointer
	ai	loopCount, loopCount, -1				lnop
	ai	pSrc, pSrc, 0x30					lnop

	;; Turn 6 byte indexes into 8 byte indexes
	nop								shufb	outIndex0, inIndex0, inIndex0, s_ABCADEFD
	nop								shufb	outIndex3, inIndex2, inIndex2, s_CDECFGHF
	nop								shufb	outIndex2, inIndex1, inIndex2, s_EFGEHabH
	nop								shufb	outIndex1, inIndex0, inIndex1, s_GHaGbcdb
	
	;; Store results and increment destination pointer
	nop								stqd	outIndex0, 0x00(pDst)
	nop								stqd	outIndex1, 0x10(pDst)
	nop								stqd	outIndex2, 0x20(pDst)
	nop								stqd	outIndex3, 0x30(pDst)
	ai	pDst, pDst, 0x40					lnop
	
	nop					decomp_6b_index_branch:	brnz	loopCount, decomp_6b_index_loop
.endif
	
.if TEST
;; Test data
.align 12
m_in_stream:	.dh	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
		.dh	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
		.dh	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27
		.dh	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37
		.dh	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47
		.dh	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57
		.dh	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67
		.dh	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77
		.dh	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87
		.dh	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97
		.dh	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7
		.dh	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7
		.dh	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7
		.dh	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7
		.dh	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7
		.dh	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
		.dh	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
		.dh	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27
		.dh	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37
		.dh	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47
		.dh	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57
		.dh	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67
		.dh	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77
		.dh	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87
		.dh	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97
		.dh	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7
		.dh	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7
		.dh	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7
		.dh	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7
		.dh	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7

m_out_stream:	.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337
		.dw	0x13371337, 0x13371337, 0x13371337, 0x13371337

.text

.global _start
_start:
{e2}	ila	pSrc, m_in_stream						{lnop}
{e2}	ila	pDst, m_out_stream						{lnop}
{e2}	il	count, 22							lnop
	{nop}								{o?}	brsl	$lr, decomp_6b_index [#func]
	{nop}									stop
.endif
   
.end

