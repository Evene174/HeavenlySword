;
; Copyright (c) 2005 Naughty Dog, Inc.
; A Wholly Owned Subsidiary of Sony Computer Entertainment, Inc.
; Use and distribution without consent strictly prohibited
;

.start

.define TEST 0

.global SelectVerts24Byte
; void SelectVerts24Byte(U8 *pSrc, U8 *pDst, U16 *pIndexes, U32 numVerts);
;
; pIndexes is a pointer a reindex table, while numVerts is the number of entries in this table.
; Each value in the reindex table refers to a vertex in the vertex buffers pointed to by pSrc.
; For each value in the reindex table, the appropriate vertex is read in from the vertex buffer and
; placed in sequence in the destination buffer, pointed to by pDst.  Thus, by using the reindex table
; a vertex buffer can be trimmed of unneeded vertexes.
; NOTE: The values in the reindex table have been multiplied by 16.
;
; This routine handles vertexs that are 12 bytes in size.  A multiple of four vertexes are always output,
; so the last vertexes in the output buffer may be garbage.



.text

; Parameters
.reg pSrc		3	; Must be 16 byte aligned.
.reg pDst		4	; Must be 16 byte aligned.
.reg pIndexes		5	; Must be 8 byte aligned.
.reg numVerts		6	; Can be any value, but will be automatically rounded up to a multiple of 4.

.reg inData0			; First quadword of data for vertex 0.
.reg inData0_2			; Second quadword of data for vertex 0.
.reg inData1			; First quadword of data for vertex 1.
.reg inData1_2			; Second quadword of data for vertex 1.
.reg inData2			; First quadword of data for vertex 2.
.reg inData2_2			; Second quadword of data for vertex 2.
.reg inData3			; First quadword of data for vertex 3.
.reg inData3_2			; Second quadword of data for vertex 3.
.reg index0			; The first index turned into the correct byte offset (index * 24).
.reg index1			; The second index turned into the correct byte offset (index * 24).
.reg index2			; The third index turned into the correct byte offset (index * 24).
.reg index3			; The fourth index turned into the correct byte offset (index * 24).
.reg indexes			; A quadword of indexes.
.reg indexes2			; indexes >> 1 -- Used to turn indexes into the correct byte offsets.
.reg indexOff			; Offsets of the indexes into a quadword.
.reg loopCount
.reg outData0
.reg outData1
.reg outData2
.reg outData3
.reg outData4
.reg outData5
.reg pSrc10			; pSrc + 0x10
.reg s_Abcd
.reg s_ABCD			; Initial shuffle mask to shuffle the first vertex.
.reg s_BBBBBBBBBBBBBBBB		; Used to get the offset of index0 into every byte of a register.
.reg s_CDab			; Initial shuffle mask to shuffle the second vertex.
.reg s_DDDDDDDDDDDDDDDD		; Used to get the offset of index1 into every byte of a register.
.reg s_FFFFFFFFFFFFFFFF		; Used to get the offset of index2 into every byte of a register.
.reg s_HHHHHHHHHHHHHHHH		; Used to get the offset of index3 into every byte of a register.
.reg sel_ABcd			; Used to generate s_mask1 from s_mask0 and s_mask2 and s_mask4 from s_mask3 and s_mask5.
.reg shufOffset			; Temporary value to create a shuffle mask.
.reg shufOffset0		; Offset of first vertex source data into a quadword shuffled into every byte of a register.
.reg shufOffset1		; Offset of second vertex source data into a quadword shuffled into every byte of a register.
.reg shufOffset2		; Offset of third vertex source data into a quadword shuffled into every byte of a register.
.reg shufOffset3		; Offset of fourth vertex source data into a quadword shuffled into every byte of a register.
.reg s_mask0			; Mask used to shuffle the first vertex into the correct output position.
.reg s_mask1			; Mask used to shuffle the last 8 bytes of the first vertex and the first 8 bytes
				; bytes of the second vertex into the correct output position.
.reg s_mask2			; Mask used to shuffle the second vertex into the correct output position.
.reg s_mask3			; Mask used to shuffle the third vertex into the correct output position.
.reg s_mask4			; Mask used to shuffle the last 8 bytes of the third vertex and the first 8 bytes
				; bytes of the fourth vertex into the correct output position.
.reg s_mask5			; Mask used to shuffle the fourth vertex into the correct output position.

.align 7

SelectVerts24Byte:
	{nop}							{o6 0}	lqd	indexes, 0x00(pIndexes)
	{nop}							{o?}	biz	numVerts, $lr
	{nop}							{o4}	cwd	s_Abcd, 0x00(pDst)
	{nop}							{o4}	fsmbi	sel_ABcd, 0x00FF
	{nop}								{lnop}
	{nop}								{lnop}
{e2}	ilh	s_BBBBBBBBBBBBBBBB, 0x0101			{o4 0}	rotqby	indexes, indexes, pIndexes
{e2}	ilh	s_DDDDDDDDDDDDDDDD, 0x0303			{o}	hbrr	sv_24_branch, sv_24_loop
{e2}	ai	loopCount, numVerts, 3					{lnop}
{e2}	ai	pSrc10, pSrc, 0x10					{lnop}
{e4 0}	rothmi	indexes2, indexes, -1					{lnop}
{e2}	ilh	shufOffset, 0x0808					{lnop}
{e2}	andbi	s_ABCD, s_Abcd, 0x0F					{lnop}
{e4}	rotmi	loopCount, loopCount, -2				{lnop}
{e2 0}	ah	index1, indexes, indexes2				{lnop}
{e2}	ilh	s_FFFFFFFFFFFFFFFF, 0x0505				{lnop}

sv_24_loop:
{e4 1}	roti	index0, index1, 16				{o4 1}	rotqbyi	index3, index1, 4
{e2 1}	andhi	indexOff, index1, 0x08				{o6 1}	lqx	inData1, pSrc, index1
{e2}	ilh	s_HHHHHHHHHHHHHHHH, 0x0707			{o6 1}	lqx	inData1_2, pSrc10, index1
{e2 1}	ai	pIndexes, pIndexes, 8				{o4 1}	shufb	shufOffset1, indexOff, indexOff, s_DDDDDDDDDDDDDDDD
{e4 1}	roti	index2, index3, 16				{o6 1}	lqx	inData0, pSrc, index0
{e2}	a	s_CDab, s_ABCD, shufOffset			{o6 1}	lqx	inData0_2, pSrc10, index0
	{nop}							{o4 1}	shufb	shufOffset0, indexOff, indexOff, s_BBBBBBBBBBBBBBBB
	{nop}							{o6 1}	lqx	inData3, pSrc, index3
	{nop}							{o6 1}	lqx	inData3_2, pSrc10, index3
	{nop}							{o4 1}	shufb	shufOffset3, indexOff, indexOff, s_HHHHHHHHHHHHHHHH
{e2 1}	a	s_mask2, s_CDab, shufOffset1			{o4 1}	shufb	shufOffset2, indexOff, indexOff, s_FFFFFFFFFFFFFFFF
{e2 1}	a	s_mask0, s_ABCD, shufOffset0			{o6 0}	lqd	indexes, 0x00(pIndexes)
{e2 1}	ai	loopCount, loopCount, -1			{o6 1}	lqx	inData2, pSrc, index2
{e2 1}	selb	s_mask1, s_mask0, s_mask2, sel_ABcd		{o6 1}	lqx	inData2_2, pSrc10, index2
{e2 1}	a	s_mask5, s_CDab, shufOffset3			{o4 1}	shufb	outData0, inData0, inData0_2, s_mask0
{e2 1}	a	s_mask3, s_ABCD, shufOffset2			{o4 1}	shufb	outData2, inData1, inData1_2, s_mask2
	{nop}							{o4 1}	shufb	outData5, inData3, inData3_2, s_mask5
	{nop}							{o4 0}	rotqby	indexes, indexes, pIndexes
{e2 1}	selb	s_mask4, s_mask3, s_mask5, sel_ABcd		{o4 1}	shufb	outData1, inData0_2, inData1, s_mask1
	{nop}							{o6 1}	stqd	outData0, 0x00(pDst)
	{nop}							{o6 1}	stqd	outData2, 0x20(pDst)
{e4 0}	rothmi	indexes2, indexes, -1				{o4 1}	shufb	outData3, inData2, inData2_2, s_mask3
	{nop}							{o4 1}	shufb	outData4, inData2_2, inData3, s_mask4
	{nop}							{o6 1}	stqd	outData5, 0x50(pDst)
	{nop}							{o6 1}	stqd	outData1, 0x10(pDst)
	{nop}							{o6 1}	stqd	outData3, 0x30(pDst)
{e2 0}	ah	index1, indexes, indexes2			{o6 1}	stqd	outData4, 0x40(pDst)
{e2 1}	ai	pDst, pDst, 0x60		sv_24_branch:	{o? 1}	brnz	loopCount, sv_24_loop

	nop							{o?}	bi	$lr

.if 0
; unrolled loop

; Load 4 indexes and rotate them into the first four halfword fields and increment the pointer.
	nop							{o6 0}	lqd	indexes, 0x00(pIndexes)
{e2 1}	ai	pIndexes, pIndexes, 8					lnop
	nop								lnop
	nop								lnop
	nop								lnop
	nop								lnop
	nop							{o4 0}	rotqby	indexes, indexes, pIndexes
	nop								lnop
	nop								lnop
	nop								lnop

; Indexes are actually index * 16.  However, we need index * 24 here, so we calculate index + (index >> 1)
{e4 0}	rothmi	indexes2, indexes, -1					lnop
	nop								lnop
	nop								lnop
	nop								lnop
{e2 0}	ah	index1, indexes, indexes2				lnop
	nop								lnop

; We have index1 in the preferred halfword, so let's get the other three.
{e4 1}	roti	index0, index1, 16				{o4 1}	rotqbyi	index3, index1, 4
	nop								lnop
	nop								lnop
	nop								lnop
{e4 1}	roti	index2, index3, 16					lnop

; Load the four vertexes (each one will span two quadwords).
	nop							{o6 1}	lqx	inData0, pSrc, index0
	nop							{o6 1}	lqx	inData0_2, pSrc10, index0
	nop							{o6 1}	lqx	inData1, pSrc, index1
	nop							{o6 1}	lqx	inData1_2, pSrc10, index1
	nop							{o6 1}	lqx	inData2, pSrc, index2
	nop							{o6 1}	lqx	inData2_2, pSrc10, index2
	nop							{o6 1}	lqx	inData3, pSrc, index3
	nop							{o6 1}	lqx	inData3_2, pSrc10, index3

; Calculate the shuffle masks we need to use to shuffle the vertex data into the output data.
; First, we find out whether the vertex starts at an offset of 0 or 8 by masking the indexes.
{e2 1}	andhi	indexOff, index1, 0x08					lnop
	nop								lnop

; Next, we shuffle out that offset from each of the four indexes into every byte of a register.
	nop							{o4 1}	shufb	shufOffset0, indexOff, indexOff, s_BBBBBBBBBBBBBBBB
	nop							{o4 1}	shufb	shufOffset1, indexOff, indexOff, s_DDDDDDDDDDDDDDDD
	nop							{o4 1}	shufb	shufOffset2, indexOff, indexOff, s_FFFFFFFFFFFFFFFF
	nop							{o4 1}	shufb	shufOffset3, indexOff, indexOff, s_HHHHHHHHHHHHHHHH

; Finally we use the shuffled offset to add to shuffle masks to create the correct shuffle masks.
{e2 1}	a	s_mask0, s_ABCD, shufOffset0				lnop
{e2 1}	a	s_mask2, s_CDab, shufOffset1				lnop
{e2 1}	a	s_mask3, s_ABCD, shufOffset2				lnop
{e2 1}	a	s_mask5, s_CDab, shufOffset3				lnop

; For each of the two output quadwords that contain data from two vertexes, we create the correct shuffle mask by combining
; two shuffle msaks from above.
{e2 1}	selb	s_mask1, s_mask0, s_mask2, sel_ABcd			lnop
{e2 1}	selb	s_mask4, s_mask3, s_mask5, sel_ABcd			lnop

; Shuffle the six output quadwords from the input vertexes using the calculated shuffle masks.
	nop							{o4 1}	shufb	outData0, inData0, inData0_2, s_mask0
	nop							{o4 1}	shufb	outData1, inData0_2, inData1, s_mask1
	nop							{o4 1}	shufb	outData2, inData1, inData1_2, s_mask2
	nop							{o4 1}	shufb	outData3, inData2, inData2_2, s_mask3
	nop							{o4 1}	shufb	outData4, inData2_2, inData3, s_mask4
	nop							{o4 1}	shufb	outData5, inData3, inData3_2, s_mask5

; Store the six quadwords and increment the output pointer
	nop							{o6 1}	stqd	outData0, 0x00(pDst)
	nop							{o6 1}	stqd	outData1, 0x10(pDst)
	nop							{o6 1}	stqd	outData2, 0x20(pDst)
	nop							{o6 1}	stqd	outData3, 0x30(pDst)
	nop							{o6 1}	stqd	outData4, 0x40(pDst)
	nop							{o6 1}	stqd	outData5, 0x50(pDst)
{e2 1}	ai	pDst, pDst, 0x60					lnop

; Decrement the loop and test for exit.
{e2 1}	ai	loopCount, loopCount, -1				lnop
	{nop}								lnop
	{nop}					sv_24_branch:	{o? 1}	brnz	loopCount, sv_24_loop

.endif



.if TEST

.data

.align 12

m_outD:		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead
		.dw 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead, 0xdeaddead

m_inD:		.dw 0x00000000, 0x10000000, 0x20000000, 0x30000000, 0x40000000, 0x50000000
		.dw 0x00000001, 0x10000001, 0x20000001, 0x30000001, 0x40000001, 0x50000001
		.dw 0x00000002, 0x10000002, 0x20000002, 0x30000002, 0x40000002, 0x50000002
		.dw 0x00000003, 0x10000003, 0x20000003, 0x30000003, 0x40000003, 0x50000003
		.dw 0x00000004, 0x10000004, 0x20000004, 0x30000004, 0x40000004, 0x50000004
		.dw 0x00000005, 0x10000005, 0x20000005, 0x30000005, 0x40000005, 0x50000005
		.dw 0x00000006, 0x10000006, 0x20000006, 0x30000006, 0x40000006, 0x50000006
		.dw 0x00000007, 0x10000007, 0x20000007, 0x30000007, 0x40000007, 0x50000007
		.dw 0x00000008, 0x10000008, 0x20000008, 0x30000008, 0x40000008, 0x50000008
		.dw 0x00000009, 0x10000009, 0x20000009, 0x30000009, 0x40000009, 0x50000009
		.dw 0x0000000A, 0x1000000A, 0x2000000A, 0x3000000A, 0x4000000A, 0x5000000A
		.dw 0x0000000B, 0x1000000B, 0x2000000B, 0x3000000B, 0x4000000B, 0x5000000B
		.dw 0x0000000C, 0x1000000C, 0x2000000C, 0x3000000C, 0x4000000C, 0x5000000C
		.dw 0x0000000D, 0x1000000D, 0x2000000D, 0x3000000D, 0x4000000D, 0x5000000D
		.dw 0x0000000E, 0x1000000E, 0x2000000E, 0x3000000E, 0x4000000E, 0x5000000E
		.dw 0x0000000F, 0x1000000F, 0x2000000F, 0x3000000F, 0x4000000F, 0x5000000F

; Test rename table
; Essentially Reverse the List, Stripping out 5 & 10, and placing them at the end
m_inRT:		.dh 0xB0, 0x90, 0x80, 0x70, 0x60, 0x40, 0x30, 0x20
		.dh 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xA0

m_NumElems:	.dw 16, 0, 0, 0		// 16 elements in the rename table



.text

.global _start
_start:
{e2}	ila	pSrc, m_inD					{o6}	lqr	numVerts, m_NumElems
{e2}	ila	pDst, m_outD						lnop
{e2}	ila	pIndexes, m_inRT				{o?}	brsl	$lr, SelectVerts24Byte	[#func]
	nop								stop

.endif

.end

