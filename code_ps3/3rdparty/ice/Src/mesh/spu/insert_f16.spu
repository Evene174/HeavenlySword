;
; Copyright (c) 2005 Naughty Dog, Inc.
; A Wholly Owned Subsidiary of Sony Computer Entertainment, Inc.
; Use and distribution without consent strictly prohibited
;

.start

.define TEST 0

.global InsertF16
; Implements InsertF16() in ice/mesh/icemeshcompress.cpp
; void InsertF16(F32 *pSrc, F32 *pDst, U32 dstStride, U32 numComponents, U16 *pReindex, U32 numVerts, VF32 scale, VF32 bias);
;
; Inserts a series of F32s contained in a uniform table into a vertex stream after conversion to F16.
;
; This rountine will only write the required data.  No data is trashed.

.extern m_strideShifts
.extern m_reindexMasks
.extern m_ABCD
.extern m_ACEGaceg

.text

.reg pSrc		3	; Must be 16 byte aligned
.reg pDst		4
.reg dstStride		5
.reg numElements	6	; How many elements are in each vertex
.reg pReindex		7	; Pointer to the reindex table
.reg numVerts		8
.reg scale		9
.reg bias		10

.reg boundOffset
.reg bReturn
.reg countShift
.reg crossBound
.reg dstData0
.reg dstData0_2
.reg dstData1
.reg dstData1_2
.reg dstData2
.reg dstData2_2
.reg dstData3
.reg dstData3_2
.reg dstOffset__
.reg dstOffset_
.reg dstOffset
.reg elementSize
.reg exp02
.reg exp13
.reg expMask
.reg f02
.reg f13
.reg fMask
.reg inData0
.reg inData1
.reg inData2
.reg inData3
.reg innerCount
.reg innerStride
.reg innerStride4
.reg jumpAddr
.reg loopAddr
.reg loopCount
.reg loopMoreThanTwice
.reg man02
.reg man13
.reg maxExp
.reg maxF
.reg maxMask02
.reg maxMask13
.reg mData0
.reg mData1
.reg mData2
.reg mData3
.reg minExp
.reg minMask02
.reg minMask13
.reg minusBoundOffset
.reg minusElementSize
.reg negBoundOffset
.reg noStraddleWrite
.reg one
.reg outData0
.reg outData0_2
.reg outData1
.reg outData1_2
.reg outData2
.reg outData2_2
.reg outData3
.reg outData3_2
.reg outerBranch
.reg outerCount
.reg outerLoop
.reg pDst0_2
.reg pDst1
.reg pDst1_2
.reg pDst2
.reg pDst21
.reg pDst21_2
.reg pDst2_2
.reg pDst22
.reg pDst22_2
.reg pDst23
.reg pDst23_2
.reg pDst3
.reg pDst3_2
.reg pReindexC
.reg reindex0
.reg reindex1
.reg reindex2
.reg reindex3
.reg reindexMaskInc
.reg reindexMaskOffset
.reg reindexOffset
.reg reindexOffset1
.reg reindexOffset2
.reg reindexOffset3
.reg reindexOffset4
.reg s_ABCDEFGH
.reg s_ACEGaceg
.reg sData0
.reg sData1
.reg sData2
.reg sData3
.reg s_DDDDDDDDDDDDDDDD
.reg s_EFGHABCD
.reg sel_elementMask
.reg sel_mask
.reg sel_sMask
.reg sExp02
.reg sExp13
.reg shData0
.reg shData1
.reg shData2
.reg shData3
.reg shift
.reg sixteen
.reg sLoopAddr
.reg s_mask
.reg s_mask2
.reg srcOffset0
.reg srcOffset1
.reg srcOffset2
.reg srcOffset3
.reg s_reindex
.reg s_reindex2
.reg s_reindexMask
.reg straddleOffset
.reg strideShift
.reg strideShifts
.reg write1
.reg write2
.reg write3
.reg writeVerts

.align 7

InsertF16:
{e2}	il	one, 1						{o6}	lqr	strideShifts, m_strideShifts
{e2}	ilh	expMask, 0x7800						{lnop}
{e2}	ilh	maxExp, 0x4000						{lnop}
{e2}	ilh	minExp, 0x3800						{lnop}
{e2}	ilh	maxF, 0x7BFF						{lnop}
{e2}	ilh	fMask, 0xC000					{o6}	lqr	s_ACEGaceg, m_ACEGaceg				
{e4}	shli	elementSize, numElements, 1			{o4}	rotqby	strideShift, strideShifts, dstStride
{e2}	ila	sLoopAddr, insert_f16_straddle_loop			{lnop}
{e2}	ila	outerLoop, insert_f16_outer_loop			{lnop}
{e2}	il	sixteen, 0x10						{lnop}
{e2}	andi	strideShift, strideShift, 0x7				{lnop}
{e2}	sfi	minusElementSize, elementSize, 16		{o6}	lqr	s_reindexMask, m_reindexMasks
{e4}	shli	reindexMaskOffset, strideShift, 2		{o4}	shlqbi	shift, one, strideShift
{e2}	ilh	s_DDDDDDDDDDDDDDDD, 0x0303			{o4}	fsmbi	sel_elementMask, 0xFFFF
{e2}	sfi	countShift, strideShift, 0				{lnop}
{e4}	shl	innerStride, dstStride, strideShift			{lnop}
{e4}	shli	reindexOffset1, shift, 1			{o4}	shlqbii	reindexOffset2, shift, 2
{e2}	ai	outerCount, shift, -1				{o4}	shlqbii	reindexOffset4, shift, 3
{e2}	ila	loopAddr, insert_f16_loop			{o4}	rotqby	s_reindexMask, s_reindexMask, reindexMaskOffset
{e4}	shli	innerStride4, innerStride, 2			{o4}	shlqby	sel_elementMask, sel_elementMask, minusElementSize
{e2}	a	reindexOffset3, reindexOffset2, reindexOffset1	{o4}	shufb	reindexMaskInc, reindexOffset2, reindexOffset2, s_DDDDDDDDDDDDDDDD

insert_f16_outer_loop:
{e2 L}	andi	reindexOffset, pReindex, 0xF			{o6}	lqr	s_ABCDEFGH, m_ABCD
{e2 L}	andi	boundOffset, pDst, 0xF				{o6 L}	lqd	outData0, 0x00(pDst)
{e2 L}	a	innerCount, numVerts, outerCount		{o4 L}	shufb	reindexOffset, reindexOffset, reindexOffset, s_DDDDDDDDDDDDDDDD
{e2 L}	a	crossBound, boundOffset, elementSize		{o4 L}	fsmbi	dstOffset, 0
{e2 L}	a	pDst21, pDst, innerStride			{o4 L}	rotqmbi innerCount, innerCount, countShift
{e2 L}	sfi	negBoundOffset, boundOffset, 0			{o4 L}	fsmbi	dstOffset_, 0
{e2 L}	cgti	crossBound, crossBound, 0x10			{o6 L}	lqd	outData1, 0x00(pDst21)
{e2 L}	sfi	minusBoundOffset, boundOffset, 16		{o4 L}	rotqmby	sel_mask, sel_elementMask, negBoundOffset
{e2 L}	selb	straddleOffset, dstOffset, sixteen, crossBound	{o? L}	biz	innerCount, $lr
{e2 L}	ai	loopCount, innerCount, 7			{o4 L}	shlqby	sel_sMask, sel_elementMask, minusBoundOffset
{e2 L}	a	pDst22, pDst21, innerStride			{o4}	rotqbyi	s_EFGHABCD, s_ABCDEFGH, 8
{e2 L}	a	pDst0_2, pDst, straddleOffset			{o4 L}	rotqmbii loopCount, loopCount, -2
{e2 L}	a	pDst23, pDst22, innerStride			{o6 L}	lqd	dstData2, 0x00(pDst22)
{e2 L}	a	pDst21_2, pDst21, straddleOffset		{o6 L}	lqd	dstData0_2, 0x00(pDst0_2)
{e2 L}	a	pDst22_2, pDst22, straddleOffset		{o6 L}	lqd	outData3, 0x00(pDst23)
{e2 L}	a	pDst23_2, pDst23, straddleOffset		{o6 L}	lqd	dstData1_2, 0x00(pDst21_2)
{e2 L}	selb	jumpAddr, loopAddr, sLoopAddr, crossBound	{o6 L}	lqd	dstData2_2, 0x00(pDst22_2)
{e2 L}	cgti	loopMoreThanTwice, loopCount, 2			{o6 L}	lqd	dstData3_2, 0x00(pDst23_2)
{e2 L}	a	s_reindex, reindexOffset, s_reindexMask		{o4 L}	shlqbii	pReindexC, pReindex, 0				
{e2 L}	and	noStraddleWrite, loopMoreThanTwice, crossBound	{o4 L}	rotqby	s_mask, s_ABCDEFGH, negBoundOffset
{e2 L}	a	s_reindex2, s_reindex, reindexMaskInc		{o4 L}	fsmbi	dstOffset__, 0
{e2 L}	selb	pDst3_2, pDst0_2, pDst23_2, noStraddleWrite	{o4 L}	rotqby	s_mask2, s_EFGHABCD, negBoundOffset
{e2 L}	selb	pDst2_2, pDst0_2, pDst22_2, noStraddleWrite	{o  L}	hbr	insert_f16_branch, jumpAddr
.cset shData0, shData1, shData2, shData3
.cset sData0, sData2
.cset mData1, mData3
.cset sExp13

insert_f16_straddle_loop:
{e2 3}	selb	outData3_2, dstData3_2, shData3, sel_sMask	{o6 2}	lqx	dstData3_2, pDst23_2, dstOffset_
{e2 3}	selb	outData1_2, dstData1_2, shData1, sel_sMask	{o6 2}	lqx	dstData1_2, pDst21_2, dstOffset_
{e2 3}	selb	outData2_2, dstData2_2, shData2, sel_sMask	{o6 2}	lqx	dstData2_2, pDst22_2, dstOffset_
{e2 3}	selb	outData0_2, dstData0_2, shData0, sel_sMask	{o6 2}	lqx	dstData0_2, pDst0_2, dstOffset_
{e2 L}	selb	pDst1_2, pDst0_2, pDst21_2, noStraddleWrite	{o6 3}	stqx	outData3_2, pDst3_2, dstOffset
{e2 L}	selb	pDst3, pDst, pDst23, loopMoreThanTwice		{o6 3}	stqx	outData2_2, pDst2_2, dstOffset
{e2 L}	selb	pDst2, pDst, pDst22, loopMoreThanTwice		{o6 3}	stqx	outData1_2, pDst1_2, dstOffset
{e2 L}	selb	pDst1, pDst, pDst21, loopMoreThanTwice		{o6 3}	stqx	outData0_2, pDst0_2, dstOffset

insert_f16_loop:
{e4 2}	shli	mData2, sData2, 3				{o6 1}	lqx	reindex3, pReindexC, reindexOffset3
{e2 2}	and	exp13, sExp13, expMask				{o6 1}	lqx	reindex2, pReindexC, reindexOffset2
{e2 3}	selb	outData2, dstData2, shData2, sel_mask		{o4 2}	shufb	man13, mData1, mData3, s_ACEGaceg
{e4 2}	shli	mData0, sData0, 3				{o6 1}	lqx	reindex1, pReindexC, reindexOffset1
{e2 2}	clgth	maxMask13, exp13, maxExp			{o6 1}	lqd	reindex0, 0x00(pReindexC)
{e2 2}	clgth	minMask13, minExp, exp13			{o4 2}	shufb	sExp02, sData0, sData2, s_ACEGaceg
{e2 2}	selb	f13, man13, sExp13, fMask			{o6 3}	stqx	outData3, pDst3, dstOffset
{e2 1}	ai	loopCount, loopCount, -1			{o6 3}	stqx	outData2, pDst2, dstOffset
{e2 2}	selb	f13, f13, maxF, maxMask13			{o4 2}	shufb	man02, mData0, mData2, s_ACEGaceg
{e2 2}	and	exp02, sExp02, expMask				{o4 1}	shufb	srcOffset3, reindex2, reindex3, s_reindex2
{e2 2}	andc	f13, f13, minMask13				{o4 1}	shufb	srcOffset1, reindex0, reindex1, s_reindex
{e2 2}	clgth	maxMask02, exp02, maxExp			{o6 2}	lqx	dstData3, pDst23, dstOffset_
{e2 2}	selb	f02, man02, sExp02, fMask			{o6 2}	lqx	dstData1, pDst21, dstOffset_
{e4 1}	rotmi	srcOffset2, srcOffset3, -16			{o6 1}	lqx	inData3, pSrc, srcOffset3
{e4 1}	rotmi	srcOffset0, srcOffset1, -16			{o6 1}	lqx	inData1, pSrc, srcOffset1
{e2 2}	clgth	minMask02, minExp, exp02			{o4 2}	shufb	shData3, f13, f13, s_mask2
{e2 2}	selb	f02, f02, maxF, maxMask02			{o4 2}	shufb	shData1, f13, f13, s_mask
{e2 1}	a	pReindexC, pReindexC, reindexOffset4		{o6 1}	lqx	inData2, pSrc, srcOffset2
{e2 2}	andc	f02, f02, minMask02				{o6 1}	lqx	inData0, pSrc, srcOffset0
{e6 1}	fma	sData3, inData3, scale, bias			{o6 3}	stqx	outData1, pDst1, dstOffset
{e6 1}	fma	sData1, inData1, scale, bias			{o6 3}	stqx	outData0, pDst, dstOffset
{e2 2}	selb	outData3, dstData3, shData3, sel_mask		{o6 2}	lqx	dstData0, pDst, dstOffset_
{e2 2}	selb	outData1, dstData1, shData1, sel_mask		{o4 1}	shlqbii	dstOffset, dstOffset_, 0
{e6 1}	fma	sData2, inData2, scale, bias			{o4 2}	shufb	shData0, f02, f02, s_mask
{e6 1}	fma	sData0, inData0, scale, bias			{o6 2}	lqx	dstData2, pDst22, dstOffset_
{e4 1}	shli	mData3, sData3, 3				{o4 1}	shlqbii	dstOffset_, dstOffset__, 0
{e4 1}	shli	mData1, sData1, 3				{o4 1}	shufb	sExp13, sData1, sData3, s_ACEGaceg
{e2 2}	selb	outData0, dstData0, shData0, sel_mask		{o4 2}	shufb	shData2, f02, f02, s_mask2
{e2 1}	a	dstOffset__, dstOffset__, innerStride4			; Branch is on next line.
					insert_f16_branch:	{o? 1}	binz	loopCount, jumpAddr	[insert_f16_straddle_loop insert_f16_loop]

{e2 L}	ai	outerCount, outerCount, -1				{lnop}
{e2 L}	andi	writeVerts, innerCount, 0x3				{lnop}
{e2 L}	ceqi	bReturn, outerCount, -1					{lnop}
{e2 L}	ceqi	write1, writeVerts, 1					{lnop}
{e2 3}	selb	outData0_2, dstData0_2, shData0, sel_sMask		{lnop}
{e2 L}	selb	outerBranch, outerLoop, $lr, bReturn			{lnop}
{e2 L}	ai	pReindex, pReindex, 2				{o6 3}	stqx	outData0_2, pDst0_2, dstOffset
{e2 3}	selb	outData1_2, dstData1_2, shData1, sel_sMask	{o6 3}	stqx	outData0, pDst, dstOffset
{e2 L}	a	pDst, pDst, dstStride				{o? L}	binz	write1, outerBranch	[insert_f16_outer_loop]
{e2 L}	ceqi	write2, writeVerts, 2				{o6 3}	stqx	outData1_2, pDst21_2, dstOffset
{e2 3}	selb	outData2_2, dstData2_2, shData2, sel_sMask	{o6 3}	stqx	outData1, pDst21, dstOffset
{e2 3}	selb	outData2, dstData2, shData2, sel_mask		{o? L}	binz	write2, outerBranch	[insert_f16_outer_loop]
{e2 L}	ceqi	write3, writeVerts, 3				{o6 3}	stqx	outData2_2, pDst22_2, dstOffset
{e2 3}	selb	outData3_2, dstData3_2, shData3, sel_sMask	{o6 3}	stqx	outData2, pDst22, dstOffset
	{nop}							{o? L}	binz	write3, outerBranch	[insert_f16_outer_loop]
	{nop}							{o6 3}	stqx	outData3_2, pDst23_2, dstOffset
	{nop}							{o6 3}	stqx	outData3, pDst23, dstOffset
	{nop}							{o? L}	bi	outerBranch	[insert_f16_outer_loop]



.if TEST

.data

.align 12
m_in_f32_stream:	.df	1.0,	2.0,	3.0,	4.0
			.df	5.0,	6.0,	7.0,	8.0
			.df	9.0,	10.0,	11.0,	12.0
			.df	13.0,	14.0,	15.0,	16.0
			.df	17.0,	18.0,	19.0,	20.0
			.df	21.0,	22.0,	23.0,	24.0
			.df	25.0,	26.0,	27.0,	28.0
			.df	29.0,	30.0,	31.0,	32.0
			.df	33.0,	34.0,	35.0,	36.0
			.df	37.0,	38.0,	39.0,	40.0
			.df	41.0,	42.0,	43.0,	44.0
			.df	45.0,	46.0,	47.0,	48.0
			.df	49.0,	50.0,	51.0,	52.0
			.df	53.0,	54.0,	55.0,	56.0
			.df	57.0,	58.0,	59.0,	60.0
			.df	61.0,	62.0,	63.0,	64.0

m_in_index_stream:	.dh	0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70
			.dh	0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00
			.dh	0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80
			.dh	0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00
			.dh	0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80
			.dh	0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00
			.dh	0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80
			.dh	0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00
			.dh	0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80
			.dh	0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00
			.dh	0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80
			.dh	0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00
			.dh	0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80
			.dh	0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00

m_out_stream:		.dw 0x0037c0de, 0x0037c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0137c0de, 0x0137c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0237c0de, 0x0237c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0337c0de, 0x0337c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0437c0de, 0x0437c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0537c0de, 0x0537c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0637c0de, 0x0637c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0737c0de, 0x0737c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0837c0de, 0x0837c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0937c0de, 0x0937c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0a37c0de, 0x0a37c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0b37c0de, 0x0b37c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0c37c0de, 0x0c37c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0d37c0de, 0x0d37c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0e37c0de, 0x0e37c0de, 0x1337c0de, 0x1337c0de
			.dw 0x0f37c0de, 0x0f37c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1037c0de, 0x1037c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1137c0de, 0x1137c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1237c0de, 0x1237c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1337c0de, 0x1337c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1437c0de, 0x1437c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1537c0de, 0x1537c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1637c0de, 0x1637c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1737c0de, 0x1737c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1837c0de, 0x1837c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1937c0de, 0x1937c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1a37c0de, 0x1a37c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1b37c0de, 0x1b37c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1c37c0de, 0x1c37c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1d37c0de, 0x1d37c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1e37c0de, 0x1e37c0de, 0x1337c0de, 0x1337c0de
			.dw 0x1f37c0de, 0x1f37c0de, 0x1337c0de, 0x1337c0de
			.dw 0x2037c0de, 0x2037c0de, 0x1337c0de, 0x1337c0de
			.dw 0x2137c0de, 0x2137c0de, 0x1337c0de, 0x1337c0de
			.dw 0x2237c0de, 0x2237c0de, 0x1337c0de, 0x1337c0de

m_mul:			.df	1, 1, 1, 1
m_add:			.df	0, 0, 0, 0

.text

.global _start
_start:
	ila	pSrc, m_in_f32_stream					lqr	scale, m_mul
	ila	pDst, m_out_stream					lqr	bias, m_add
	il	dstStride, 0x14						{lnop}
	il	numElements, 0x3					{lnop}
	ila	pReindex, m_in_index_stream				{lnop}
	il	numVerts, 134						{lnop}
	{nop}								brsl	$lr, InsertF16 [#func]
	{nop}								stop

.endif

.end

