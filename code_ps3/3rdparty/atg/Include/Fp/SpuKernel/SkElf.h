//--------------------------------------------------------------------------------------------------
/**
	@file		SkElf.h

	@brief		Utility class for parsing elf files

	@note		(c) Copyright Sony Computer Entertainment 2004. All Rights Reserved.
**/
//--------------------------------------------------------------------------------------------------

#ifndef SK_ELF_H
#define SK_ELF_H

//--------------------------------------------------------------------------------------------------
//  INCLUDES
//--------------------------------------------------------------------------------------------------

#include <Fw/FwResource.h>

//--------------------------------------------------------------------------------------------------
//  SWITCHES
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
//  MACRO DEFINITIONS
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
//  DECLARATIONS
//--------------------------------------------------------------------------------------------------

namespace ElfTypes
{
	struct elf32_phdr;
};

//--------------------------------------------------------------------------------------------------
//  CLASS DEFINITIONS
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
	@class			SkElf

	@brief			Holds a loaded elf file and provides accessors

	@note			This object must be kept live for as long as the elf file is needed

	@note			If the filename passed in ends with the extension ".elf" it is assumed
					to be a fully linked elf file in ELF format.
					If the filename passed in ends with any other extension (eg. ".mod") it is
					assumed to be a minimal binary file representing an SPU module

	@note			An SPU Module might be generated by, running:
					"spu-lv2-objcopy -O binary -S input.elf output.spu.mod"
					Or one might be generated by running SN's spumodgen.exe on an elf
					that was linked with "-r".
					This is all work in progress.
					An SPU Module has 0x20 bytes header before the entry point

	@note			At some point in the future it's possible the support for the full elf file
					will be discontinued
**/
//--------------------------------------------------------------------------------------------------

class SkElf
{
public:
	enum DataType
	{
		kSpuElf,
		kSpuModule
	};

							SkElf( const char* filename );
							SkElf( const u8* pEmbeddedBaseAddr, size_t embeddedSize, DataType dataType );
							~SkElf();

	u16						GetNumProgramHeaders( void ) const;
	u32						GetProgramHeaderType( u32 phNo ) const;
	u32						GetProgramHeaderOffset( u32 phNo ) const;
	u32						GetProgramHeaderVAddr( u32 phNo ) const;
	u32						GetProgramHeaderPAddr( u32 phNo ) const;
	u32						GetProgramHeaderFileSz( u32 phNo ) const;
	u32						GetProgramHeaderMemSz( u32 phNo ) const;

	bool					IsProgramHeaderLoadType( u32 phNo ) const;

	const void*				GetFileDataPtr( void ) const				{ return m_dataPtr; }
	const void*				GetFileDataPtr( u32 offset ) const			{ return FwAddPtr( m_dataPtr, offset); }

	void					PrintfInfo( void ) const;		//Useful debugging function

	u32						GetFileSize( void ) const					{ return m_fileSize; }
	unsigned int			GetEntryPoint( void ) const					{ return m_entryPoint; }

	void					GetUploadedAddrBounds( u32* pLowerBound, u32* pUpperBound ) const;

	bool					IsMinimalModule( void ) const				{ return m_isMinimalModule; }

private:
	ElfTypes::elf32_phdr*	GetProgramHeader( u32 phNo );
	const ElfTypes::elf32_phdr*	GetProgramHeader( u32 phNo ) const;

	void					Init( const void* pData, u32 size, DataType dataType );

	FwResourceHandle		m_hResource;
	unsigned int			m_textStart;
	unsigned int			m_dataStart;
	unsigned int			m_roDataStart;
	unsigned int			m_bssStart;
	unsigned int			m_entryPoint;
	int						m_endian;

	const void*				m_dataPtr;
	u32						m_fileSize;

	bool					m_isMinimalModule;
};

//--------------------------------------------------------------------------------------------------
//  INLINE FUNCTION DEFINITIONS
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
//  GLOBAL NAMESPACE DECLARATIONS
//--------------------------------------------------------------------------------------------------

#endif // SK_ELF_H
