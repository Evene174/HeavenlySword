//--------------------------------------------------------------------------------------------------
/**
	@file		GpGraph.h

	@brief		Graph drawing helper.

	@note		(c) Copyright Sony Computer Entertainment 2006. All Rights Reserved.	
**/
//--------------------------------------------------------------------------------------------------

#ifndef GP_GRAPH_INL
#define GP_GRAPH_INL

//--------------------------------------------------------------------------------------------------
//  INLINE FUNCTION DEFINITIONS
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
	@brief			
**/
//--------------------------------------------------------------------------------------------------
	
inline void GpGraph::ResetSamples()
{
	m_pNextFreeSample = m_pSamples;
    m_numSamples = 0;
}
	
//--------------------------------------------------------------------------------------------------
/**
	@brief			
**/
//--------------------------------------------------------------------------------------------------

inline void GpGraph::SetVisibility(bool isVisible)
{
	m_isVisible = isVisible;
}

//--------------------------------------------------------------------------------------------------
/**
	@brief			
**/
//--------------------------------------------------------------------------------------------------

inline bool GpGraph::GetVisibility() const
{
	return m_isVisible;
}

//--------------------------------------------------------------------------------------------------
/**
	@brief			
**/
//--------------------------------------------------------------------------------------------------

inline void GpGraph::SetDrawOrigin(float x, float y)
{
	FW_ASSERT((x >= 0.0f) && (x < 1.0f));
	FW_ASSERT((y >= 0.0f) && (y < 1.0f));
		
	m_x = x;
	m_y = y;
	
	RequestFullRefresh();
}

//--------------------------------------------------------------------------------------------------
/**
	@brief			
**/
//--------------------------------------------------------------------------------------------------

inline void GpGraph::GetDrawOrigin(float* pX, float* pY) const
{
	FW_ASSERT(pX && pY);
	
	*pX = m_x;
	*pY = m_y;
}

//--------------------------------------------------------------------------------------------------
/**
	@brief			
**/
//--------------------------------------------------------------------------------------------------

inline void GpGraph::SetDrawDimensions(float width, float height)
{
	FW_ASSERT((width > 0.0f) && (width <= 1.0f));
	FW_ASSERT((height > 0.0f) && (height <= 1.0f));
	
	m_width = width;
	m_height = height;

	RequestFullRefresh();
}

//--------------------------------------------------------------------------------------------------
/**
	@brief			
**/
//--------------------------------------------------------------------------------------------------

inline void GpGraph::GetDrawDimensions(float* pWidth, float* pHeight) const
{
	FW_ASSERT(pWidth && pHeight);
	
	*pWidth = m_width;
	*pHeight = m_height;
}

//--------------------------------------------------------------------------------------------------
/**
	@brief			
**/
//--------------------------------------------------------------------------------------------------

inline void GpGraph::SetColour(GcColour_arg colour)
{
	m_colour = colour;
}

//--------------------------------------------------------------------------------------------------
/**
	@brief			
**/
//--------------------------------------------------------------------------------------------------

inline GcColour GpGraph::GetColour() const
{
	return m_colour;
}

//--------------------------------------------------------------------------------------------------
/**
	@brief			
**/
//--------------------------------------------------------------------------------------------------

inline void GpGraph::SetTransparency(float alpha)
{
	FW_ASSERT((alpha >= 0.0f) && (alpha <= 1.0f));
	
	m_transparency = alpha;
	
	RequestFullRefresh();
}

//--------------------------------------------------------------------------------------------------
/**
	@brief			
**/
//--------------------------------------------------------------------------------------------------

inline float GpGraph::GetTransparency() const
{
	return m_transparency;
}

//--------------------------------------------------------------------------------------------------
/**
	@brief			
**/
//--------------------------------------------------------------------------------------------------

inline void GpGraph::SetClampFactor(float clampFactor)
{
	FW_ASSERT(clampFactor >= 0.0f);
	
	m_clampSampleFactor = clampFactor;
}

//--------------------------------------------------------------------------------------------------
/**
	@brief			
**/
//--------------------------------------------------------------------------------------------------

inline float GpGraph::GetClampFactor() const
{
	return m_clampSampleFactor;
}

//--------------------------------------------------------------------------------------------------

#endif // GP_GRAPH_INL

