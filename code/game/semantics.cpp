// file automatically generated by metashade, so don't edit it

#include <map>
#include <string>

class SemanticLookup
{
public:
	SemanticLookup()
	{
		m_values[3] = ntstd::string("STREAM_BINORMAL");
		m_values[5] = ntstd::string("STREAM_BLENDINDICES");
		m_values[4] = ntstd::string("STREAM_BLENDWEIGHTS");
		m_values[6000] = ntstd::string("STREAM_DIFFUSE_TEXCOORD0");
		m_values[6001] = ntstd::string("STREAM_DIFFUSE_TEXCOORD1");
		m_values[6002] = ntstd::string("STREAM_DIFFUSE_TEXCOORD2");
		m_values[3004] = ntstd::string("STREAM_EFFECT_COLOUR");
		m_values[3010] = ntstd::string("STREAM_EFFECT_PARAMETRIC_ADVANCED");
		m_values[3008] = ntstd::string("STREAM_EFFECT_PARAMETRIC_MOTION");
		m_values[3009] = ntstd::string("STREAM_EFFECT_PARAMETRIC_SIZE");
		m_values[3001] = ntstd::string("STREAM_EFFECT_POSITION");
		m_values[3006] = ntstd::string("STREAM_EFFECT_ROTATION");
		m_values[3007] = ntstd::string("STREAM_EFFECT_ROTATION_SPEED");
		m_values[3002] = ntstd::string("STREAM_EFFECT_SIZE_1D");
		m_values[3003] = ntstd::string("STREAM_EFFECT_SIZE_2D");
		m_values[3005] = ntstd::string("STREAM_EFFECT_TEXCOORD_2D");
		m_values[6004] = ntstd::string("STREAM_LAYER_TEXCOORD0");
		m_values[6005] = ntstd::string("STREAM_LAYER_TEXCOORD1");
		m_values[1] = ntstd::string("STREAM_NORMAL");
		m_values[6003] = ntstd::string("STREAM_NORMAL_MAP_TEXCOORD");
		m_values[0] = ntstd::string("STREAM_POSITION");
		m_values[3011] = ntstd::string("STREAM_PROGRAMMER_EFFECTS_END");
		m_values[3000] = ntstd::string("STREAM_PROGRAMMER_EFFECTS_START");
		m_values[2] = ntstd::string("STREAM_TANGENT");
		m_values[-1] = ntstd::string("STREAM_UNKNOWN");
		m_values[7003] = ntstd::string("PROPERTY_ALPHATEST_THRESHOLD");
		m_values[4008] = ntstd::string("PROPERTY_BATCH_TRANSFORMS");
		m_values[1000] = ntstd::string("PROPERTY_BLEND_TRANSFORMS");
		m_values[4004] = ntstd::string("PROPERTY_CAMERA_UNIT_AXIS_X");
		m_values[4005] = ntstd::string("PROPERTY_CAMERA_UNIT_AXIS_Y");
		m_values[4006] = ntstd::string("PROPERTY_CAMERA_Z_WITH_OFFSET");
		m_values[1039] = ntstd::string("PROPERTY_DEPTHOFFIELD_PARAMS");
		m_values[1032] = ntstd::string("PROPERTY_DEPTH_HAZE_BETA1PLUSBETA2");
		m_values[1033] = ntstd::string("PROPERTY_DEPTH_HAZE_BETADASH1");
		m_values[1034] = ntstd::string("PROPERTY_DEPTH_HAZE_BETADASH2");
		m_values[1029] = ntstd::string("PROPERTY_DEPTH_HAZE_CONSTS_A");
		m_values[1030] = ntstd::string("PROPERTY_DEPTH_HAZE_CONSTS_G");
		m_values[1035] = ntstd::string("PROPERTY_DEPTH_HAZE_RECIP_BETA1PLUSBETA2");
		m_values[7000] = ntstd::string("PROPERTY_DIFFUSE_COLOUR0");
		m_values[7001] = ntstd::string("PROPERTY_DIFFUSE_COLOUR1");
		m_values[7002] = ntstd::string("PROPERTY_DIFFUSE_COLOUR2");
		m_values[7904] = ntstd::string("PROPERTY_FAKE_LIGHT");
		m_values[1004] = ntstd::string("PROPERTY_FILL_SH");
		m_values[1003] = ntstd::string("PROPERTY_FILL_SH_MATRICES");
		m_values[7013] = ntstd::string("PROPERTY_FRESNEL_EFFECT");
		m_values[1013] = ntstd::string("PROPERTY_GAME_TIME");
		m_values[1010] = ntstd::string("PROPERTY_KEY_DIR_COLOUR");
		m_values[1007] = ntstd::string("PROPERTY_KEY_DIR_OBJECTSPACE");
		m_values[1009] = ntstd::string("PROPERTY_KEY_DIR_REFLECTANCESPACE");
		m_values[1008] = ntstd::string("PROPERTY_KEY_DIR_WORLDSPACE");
		m_values[7004] = ntstd::string("PROPERTY_LAYER_SCALE_AND_BIAS0");
		m_values[7005] = ntstd::string("PROPERTY_LAYER_SCALE_AND_BIAS1");
		m_values[7006] = ntstd::string("PROPERTY_LAYER_SPEED_U0");
		m_values[7008] = ntstd::string("PROPERTY_LAYER_SPEED_U1");
		m_values[7007] = ntstd::string("PROPERTY_LAYER_SPEED_V0");
		m_values[7009] = ntstd::string("PROPERTY_LAYER_SPEED_V1");
		m_values[1011] = ntstd::string("PROPERTY_OVERALL_AMBIENT");
		m_values[1037] = ntstd::string("PROPERTY_PARALLAX_SCALE_AND_BIAS");
		m_values[4007] = ntstd::string("PROPERTY_PROGRAMMER_EFFECTS_END");
		m_values[4000] = ntstd::string("PROPERTY_PROGRAMMER_EFFECTS_START");
		m_values[1002] = ntstd::string("PROPERTY_PROJECTION");
		m_values[4001] = ntstd::string("PROPERTY_PROJECTION_NON_TRANSPOSE");
		m_values[7012] = ntstd::string("PROPERTY_REFLECTANCE_COLOUR");
		m_values[1006] = ntstd::string("PROPERTY_REFLECTANCE_MAP_COLOUR");
		m_values[1005] = ntstd::string("PROPERTY_REFLECTANCE_MAP_TRANSFORM");
		m_values[1018] = ntstd::string("PROPERTY_SHADOW_MAP_RESOLUTION");
		m_values[1014] = ntstd::string("PROPERTY_SHADOW_MAP_TRANSFORM");
		m_values[1015] = ntstd::string("PROPERTY_SHADOW_MAP_TRANSFORM1");
		m_values[1016] = ntstd::string("PROPERTY_SHADOW_MAP_TRANSFORM2");
		m_values[1017] = ntstd::string("PROPERTY_SHADOW_MAP_TRANSFORM3");
		m_values[1019] = ntstd::string("PROPERTY_SHADOW_PLANE0");
		m_values[1020] = ntstd::string("PROPERTY_SHADOW_PLANE1");
		m_values[1021] = ntstd::string("PROPERTY_SHADOW_PLANE2");
		m_values[1022] = ntstd::string("PROPERTY_SHADOW_PLANE3");
		m_values[1023] = ntstd::string("PROPERTY_SHADOW_PLANE4");
		m_values[1024] = ntstd::string("PROPERTY_SHADOW_RADII");
		m_values[1025] = ntstd::string("PROPERTY_SHADOW_RADII1");
		m_values[1026] = ntstd::string("PROPERTY_SHADOW_RADII2");
		m_values[1027] = ntstd::string("PROPERTY_SHADOW_RADII3");
		m_values[7010] = ntstd::string("PROPERTY_SPECULAR_COLOUR");
		m_values[7900] = ntstd::string("PROPERTY_SPECULAR_COLOUR2");
		m_values[7011] = ntstd::string("PROPERTY_SPECULAR_POWER");
		m_values[7901] = ntstd::string("PROPERTY_SPECULAR_POWER2");
		m_values[7902] = ntstd::string("PROPERTY_SPECULAR_SHIFT");
		m_values[7903] = ntstd::string("PROPERTY_SPECULAR_SHIFT2");
		m_values[1036] = ntstd::string("PROPERTY_SUN_COLOUR");
		m_values[1031] = ntstd::string("PROPERTY_SUN_DIRECTION_OBJECTSPACE");
		m_values[-1] = ntstd::string("PROPERTY_UNKNOWN");
		m_values[4002] = ntstd::string("PROPERTY_VIEWPORT_RECIPRICAL_SIZE");
		m_values[4003] = ntstd::string("PROPERTY_VIEWPORT_SCALARS");
		m_values[1012] = ntstd::string("PROPERTY_VIEW_POSITION_OBJECTSPACE");
		m_values[1028] = ntstd::string("PROPERTY_VIEW_TRANSFORM");
		m_values[1038] = ntstd::string("PROPERTY_VPOS_TO_UV");
		m_values[1001] = ntstd::string("PROPERTY_WORLD_TRANSFORM");
		m_values[8001] = ntstd::string("TEXTURE_DIFFUSE0");
		m_values[8002] = ntstd::string("TEXTURE_DIFFUSE1");
		m_values[8003] = ntstd::string("TEXTURE_DIFFUSE2");
		m_values[8004] = ntstd::string("TEXTURE_LAYER0");
		m_values[8005] = ntstd::string("TEXTURE_LAYER1");
		m_values[2000] = ntstd::string("TEXTURE_NORMALISATION_CUBE_MAP");
		m_values[8000] = ntstd::string("TEXTURE_NORMAL_MAP");
		m_values[2001] = ntstd::string("TEXTURE_REFLECTANCE_MAP");
		m_values[2002] = ntstd::string("TEXTURE_SHADOW_MAP");
		m_values[2003] = ntstd::string("TEXTURE_SHADOW_MAP1");
		m_values[2004] = ntstd::string("TEXTURE_SHADOW_MAP2");
		m_values[2005] = ntstd::string("TEXTURE_SHADOW_MAP3");
		m_values[5000] = ntstd::string("TEXTURE_SPRITE");
		m_values[2006] = ntstd::string("TEXTURE_STENCIL_MAP");
		m_values[-1] = ntstd::string("TEXTURE_UNKNOWN");
		m_values.erase( -1 );// -1 means unknown, so shouldn't be in here
	}

	char const* GetName( int tag ) const
	{
		ntstd::map<int, ntstd::string>::const_iterator it = m_values.find( tag );
		return ( it != m_values.end() ) ? it->second.c_str() : 0;
	}

private:
	ntstd::map<int, ntstd::string> m_values;
};

char const* GetSemanticTagName( int tag )
{
	static SemanticLookup lookup;
	return lookup.GetName( tag );
}
