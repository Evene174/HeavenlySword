/* 
 * 
 * Confidential Information of Telekinesys Research Limited (t/a Havok).  Not for disclosure or distribution without Havok's
 * prior written consent.This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Level 2 and Level 3 source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2006 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 * 
 */

#include <hkbase/hkBase.h>
#include <hkbase/thread/hkSpuUtils.h>
#include <hkbase/thread/hkSpuDmaManager.h>

#include <hkdynamics/world/simulation/multithreaded/spu/hkSpuConstraint.h>
#include <hkbase/thread/hkSpuStack.h>
#include <hkbase/thread/job/hkJobQueue.h>
#include <hkdynamics/world/simulation/multithreaded/spu/hkSpuConfig.h>

#include <hkconstraintsolver/solve/hkSolverInfo.h>

#include <sys/spu_thread.h>
#include <stdint.h>


// The size of the buffer to be allocated for solving constraint systems.  The size available depends
// on the size of the compiled elf.

// Allocate a buffer for solving constraint systems.
static HK_ALIGN16(char buffer[HK_SPU_TOTAL_BUFFER_SIZE]);
static HK_ALIGN( char queueBuf[sizeof(hkJobQueue)], 128 );

// By default we do not enable timers
//#define ENABLE_TIMERS

#if defined (ENABLE_TIMERS)

	#include <hkbase/monitor/hkSpuMonitorCache.h>
	#include <hkbase/monitor/hkMonitorStream.h>


	// 8KB monitor buf
	HK_ALIGN( unsigned int localMonitorStream[(1024*8)/sizeof(unsigned int)], 128 );
	// 4KB monitor string buf
	HK_ALIGN( unsigned int localMonitorStrings[(1024*4)/sizeof(unsigned int)], 128 );

#endif

// this function is used to reliably catch asserts on the spu when debugging
void hkAssertFailed(int id, const char* text)
{
	//@@@PS3SF: <todo: move id to r0
	if ( text )
	{
		HK_SPU_DEBUG_PRINTF( (text) );
	}
	__asm__("stop");
}

int main(uint64_t solverInfoAddress, uint64_t queueAddress, uint64_t monitorCacheEA, uint64_t spuId)
{
	HK_SPU_DEBUG_PRINTF(("SPU(%d) thread started\n", (int)spuId));

	hkSpuStack::getInstance().initMemory(buffer, HK_SPU_TOTAL_BUFFER_SIZE);

	HK_CHECK_ALIGN16(solverInfoAddress);
	HK_CHECK_ALIGN16(queueAddress);
	hkSpuDmaManager::getFromMainMemoryAndWaitForCompletion( &queueBuf, (const void*)hkUlong(queueAddress), sizeof(hkJobQueue), hkSpuDmaManager::READ_COPY );
	hkSpuDmaManager::performFinalChecks( (const void*)hkUlong(queueAddress), &queueBuf, sizeof(hkJobQueue));
	hkJobQueue* queue = (hkJobQueue*)&queueBuf;


	#if defined (ENABLE_TIMERS)
		// Initialize the monitors to point to the local buffers
		hkSpuInitMonitors( (char*)localMonitorStream, sizeof(localMonitorStream) );

		hkSpuMonitorCache monitorCache;
		hkSpuDmaManager::getFromMainMemoryAndWaitForCompletion( &monitorCache, (const void*)hkUlong(monitorCacheEA), sizeof(hkSpuMonitorCache), hkSpuDmaManager::READ_COPY );
		hkSpuDmaManager::performFinalChecks( (const void*)hkUlong(monitorCacheEA), &monitorCache, sizeof(hkSpuMonitorCache) );
	#endif


	//This function will keep spinning indefinitely, solving any constraint jobs that are generated by the PPU.
	while (1)
	{
		hkSpuProcessNextJob( *queue, (const void*)hkUlong(solverInfoAddress), hkJobQueue::WAIT_FOR_NEXT_JOB, int(spuId) );

		#if defined (ENABLE_TIMERS)
			monitorCache.sendToMainMemoryAndResetSpu( (hkSpuMonitorCache*)hkUlong(monitorCacheEA), (hkSpuMonitorCache::StringLookup*)localMonitorStrings, sizeof(localMonitorStrings) );
		#endif
	}


	HK_SPU_DEBUG_PRINTF(("SPU thread ending\n"));
	sys_spu_thread_exit(0);
}


/*
* Havok SDK - PUBLIC RELEASE, BUILD(#20061009)
*
* Confidential Information of Havok.  (C) Copyright 1999-2006 
* Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
* Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
* rights, and intellectual property rights in the Havok software remain in
* Havok and/or its suppliers.
*
* Use of this software for evaluation purposes is subject to and indicates 
* acceptance of the End User licence Agreement for this product. A copy of 
* the license is included with this software and is also available from salesteam@havok.com.
*
*/
