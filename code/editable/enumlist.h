/***************************************************************************************************
*
*	Enum delarations
*
*	CHANGES		
*
*	03/10/2003	Mike	Created
*
*	NOTES:		By creating an enum in this file, you generate a standard C++ enum that can be used
*				normally, however it also creates a structure that can be parsed by the editor so
*				that a drop down box of the string version of the values can be created. Both are 
*				always in sync
*
* // Here is an example enum definition
*
* ENUM_START(EnumWeather)		// Enum is called EnumWeather... this is the name that will also appear in the editor
*	ENUM_SET(RAIN, 4)			// RAIN = 4;
*	ENUM_AUTO(SNOW)				// SNOW = 5; - incremented from previous
* 	ENUM_AUTO(HAIL)				// HAIL = 6;
* 	ENUM_SET(SUNNY, 100)		// SUNNY = 100;
* ENUM_END()					// Close the enum.
*
*
* Extension: JML Added - 23-03-05
*
* ENUM_STARTEX(EnumWeather, ENUM_XML|ENUM_LUA) // Enum is called EnumWeather... it can be accessed in xml and lua
*	ENUM_SET(RAIN, 4)			// In Lua:  EnumWeather.RAIN = 4
*	ENUM_AUTO(SNOW)				//          EnumWeather.SNOW = 5
* 	ENUM_AUTO(HAIL)				//          EnumWeather.HAIL = 6
* 	ENUM_SET(SUNNY, 100)		//          EnumWeather.SUNNY = 100
* ENUM_END()					// 
*
* ENUM_STARTEX_PUBLISH_AS(EnumWeather, ENUM_LUA, Weather) // Enum is called EnumWeather... It can be accessed in lue, but not xml.
*	                						             // In lua the table is called Weather not EnumWeather
*	ENUM_SET(RAIN, 4)			// Weather.Rain = 4
*	ENUM_AUTO(SNOW)				// Weather.Snow = 5
* 	ENUM_AUTO(HAIL)				// Weather.Hail = 6
* 	ENUM_SET(SUNNY, 100)		// Weather.Sunny = 100
* ENUM_END()					// 
*
***************************************************************************************************/

#ifndef	_ENUMLIST_H
#define	_ENUMLIST_H

#define ENUM_XML 1
#define ENUM_LUA 2

// Ensure we have default ENUM_START/SET/AUTO/END macros in place

#ifndef	ENUM_SET
	#define ENUM_STARTEX(n,t)              enum n {
	#define ENUM_STARTEX_PUBLISH_AS(n,t,a) enum n {
	#define ENUM_SET(n,v)	              n = v,
	#define ENUM_SET_AS(n,v,as)	          n = v,
	#define ENUM_AUTO(n)	              n,
	#define ENUM_AUTO_AS(n,as)	          n,
	#define ENUM_END()		              };	
#endif

#define ENUM_START(n) ENUM_STARTEX(n, ENUM_XML)

// Reaction Matrix Lookup types
ENUM_START(REACTION_MATRIX_LOOKUP)
	ENUM_AUTO(RML_UNBLOCKED) 
	ENUM_AUTO(RML_SPEEDBLOCKED)
	ENUM_AUTO(RML_POWERBLOCKED)
	ENUM_AUTO(RML_RANGEBLOCKED)
	ENUM_AUTO(RML_SYNCDSECONDARY)
ENUM_END()

// Combat reaction types
ENUM_START(REACTION_TYPE)
	ENUM_AUTO(RT_DEFLECT)
	ENUM_AUTO(RT_BLOCK_STAGGER)
	ENUM_AUTO(RT_IMPACT_STAGGER)
	ENUM_AUTO(RT_RECOIL)
	ENUM_AUTO(RT_HELD)
	ENUM_AUTO(RT_KO)
	ENUM_AUTO(RT_KILL)
	ENUM_AUTO(RT_COUNT)
ENUM_END()

// Relative Movement Types for Combat - temp
ENUM_START(COMBAT_REL_MOVE_TYPE)
	ENUM_AUTO(CRM_ATTACKER_ROOT_INIT)
	ENUM_AUTO(CRM_RECEIVER_ROOT_INIT)
	ENUM_AUTO(CRM_ORIGIN)
	ENUM_AUTO(CRM_TO_LOCATOR)
	ENUM_AUTO(CRM_COUNT)
ENUM_END()

// When using specific animations for movement in different directions
ENUM_START(ANIM_DIRECTION)
	ENUM_AUTO(AD_FRONT)
	ENUM_AUTO(AD_LEFT)
	ENUM_AUTO(AD_RIGHT)
	ENUM_AUTO(AD_BACK_LEFT)
	ENUM_AUTO(AD_BACKRIGHT)
	ENUM_AUTO(AD_COUNT)
ENUM_END()

// Combat Stance types- IF YOU CHANGE THIS ENUM, PLEASE CHANGE the array at the top of attackdebugger.cpp - thanks
ENUM_START(STANCE_TYPE)
	ENUM_AUTO(ST_SPEED)
	ENUM_AUTO(ST_POWER)
	ENUM_AUTO(ST_RANGE)
	ENUM_AUTO(ST_COUNT)
ENUM_END()

// Block types
ENUM_START(BLOCK_TYPE)
	ENUM_AUTO(BT_SPEED)
	ENUM_AUTO(BT_POWER)
	ENUM_AUTO(BT_RANGE)
	ENUM_AUTO(BT_GRAB)
	ENUM_AUTO(BT_COUNT)
ENUM_END()

ENUM_START(VIRTUAL_BUTTON_TYPE)
	// These virtual buttons now map directly to the actual number of
	// buttons available on game pads - enterpreted into slightly
	// gamey values - there are no double button interpretations here
	ENUM_AUTO(AB_ATTACK_FAST)
	ENUM_AUTO(AB_ATTACK_MEDIUM)
	ENUM_AUTO(AB_ACTION)
	ENUM_AUTO(AB_GRAB)
	ENUM_AUTO(AB_DODGE_LEFT)
	ENUM_AUTO(AB_DODGE_RIGHT)
	ENUM_AUTO(AB_DODGE_FORWARD)
	ENUM_AUTO(AB_DODGE_BACK)
	ENUM_AUTO(AB_PSTANCE)
	ENUM_AUTO(AB_RSTANCE)
	ENUM_AUTO(AB_SPECIAL)
	ENUM_AUTO(AB_SPECIAL_A)
	ENUM_AUTO(AB_SPECIAL_B)
	ENUM_AUTO(AB_AIM)
	ENUM_AUTO(AB_NONE)
	ENUM_AUTO(AB_NUM)
ENUM_END()

// This enum links into the CAttackLink class.  It describes how attacks are
// layed out
ENUM_START(ATTACK_MOVE_TYPE)
	ENUM_AUTO(AM_SPEED_FAST)
	ENUM_AUTO(AM_SPEED_MEDIUM)
	ENUM_AUTO(AM_SPEED_GRAB)
	ENUM_AUTO(AM_POWER_FAST)
	ENUM_AUTO(AM_POWER_MEDIUM)
	ENUM_AUTO(AM_POWER_GRAB)
	ENUM_AUTO(AM_RANGE_FAST)
	ENUM_AUTO(AM_RANGE_MEDIUM)
	ENUM_AUTO(AM_RANGE_GRAB)
	ENUM_AUTO(AM_ACTION)

	ENUM_AUTO(AM_MASH_SPEED_FAST)
	ENUM_AUTO(AM_MASH_SPEED_MEDIUM)
	ENUM_AUTO(AM_MASH_SPEED_GRAB)
	ENUM_AUTO(AM_MASH_POWER_FAST)
	ENUM_AUTO(AM_MASH_POWER_MEDIUM)
	ENUM_AUTO(AM_MASH_POWER_GRAB)
	ENUM_AUTO(AM_MASH_RANGE_FAST)
	ENUM_AUTO(AM_MASH_RANGE_MEDIUM)
	ENUM_AUTO(AM_MASH_RANGE_GRAB)
	ENUM_AUTO(AM_MASH_ACTION)

	ENUM_AUTO(AM_DODGE_LEFT)
	ENUM_AUTO(AM_DODGE_RIGHT)
	ENUM_AUTO(AM_DODGE_FORWARD)
	ENUM_AUTO(AM_DODGE_BACK)
	ENUM_AUTO(AM_NONE)
ENUM_END()

ENUM_START(ATTACK_TARGET_TYPE)
	ENUM_AUTO(AT_TYPE_ATTACK)
	ENUM_AUTO(AT_TYPE_MEDIUM_ATTACK)
	ENUM_AUTO(AT_TYPE_LONG_ATTACK)
	ENUM_AUTO(AT_TYPE_LAUNCH)
	ENUM_AUTO(AT_TYPE_THROW)
	ENUM_AUTO(AT_TYPE_AUTO)
	ENUM_AUTO(AT_TYPE_EVADE)
	ENUM_AUTO(AT_TYPE_INNER)
	ENUM_AUTO(AT_TYPE_DOWN)
	ENUM_AUTO(AT_TYPE_DOWN_INNER)
	ENUM_AUTO(AT_TYPE_SPEED_EXTRA)
	ENUM_AUTO(AT_TYPE_AERIAL_COMBO)
	ENUM_AUTO(AT_TYPE_PLAYER)
	ENUM_AUTO(AT_TYPE_NEXT_NEAREST)
	ENUM_AUTO(AT_TYPE_NULL)
ENUM_END()

// NOTE: IF YOU CHANGE THIS ENUM, PLEASE CHANGE the array at the top of attackdebugger.cpp - thanks
ENUM_START(ATTACK_CLASS)
	ENUM_AUTO(AC_SPEED_FAST)
	ENUM_AUTO(AC_SPEED_MEDIUM)
	ENUM_AUTO(AC_POWER_FAST)
	ENUM_AUTO(AC_POWER_MEDIUM)
	ENUM_AUTO(AC_RANGE_FAST)
	ENUM_AUTO(AC_RANGE_MEDIUM)
	ENUM_AUTO(AC_GRAB_GOTO)
	ENUM_AUTO(AC_GRAB_HOLD)
	ENUM_AUTO(AC_GRAB_STRIKE)
	ENUM_AUTO(AC_EVADE)
	ENUM_AUTO(AC_COUNT)
ENUM_END()

// NOTE: IF YOU CHANGE THIS ENUM, PLEASE CHANGE the array at the top of attackdebugger.cpp - thanks
ENUM_START(ATTACK_MOVEMENT_TYPE)
	ENUM_AUTO(AMT_GROUND_TO_GROUND)
	ENUM_AUTO(AMT_GROUND_TO_AIR)
	ENUM_AUTO(AMT_AIR_TO_AIR)
	ENUM_AUTO(AMT_AIR_TO_GROUND)
	ENUM_AUTO(AMT_COUNT)
ENUM_END()


//This enum specifies the different type of evades we pass into GetEvade (CAttackTracker) to facilitate
//Kai's skill-evades alongside the standard ones.
ENUM_START(ATTACK_EVADE_TYPE)
	ENUM_AUTO(AET_STANDARD)
	ENUM_AUTO(AET_SKILLEVADE)
	ENUM_AUTO(AET_SKILLEVADE_CLOSE)
	ENUM_AUTO(AET_SUPERSKILLEVADE)
	ENUM_AUTO(AET_SUPERSKILLEVADE_CLOSE)
ENUM_END()

//This enum specifies the different segments around the player so that we can choose our pooled
//skill-evade animation based on where the attack is coming from (means less popping on the enemy at least).
ENUM_START(ATTACK_EVADE_SECTOR)
	ENUM_AUTO(AES_FRONT)
	ENUM_AUTO(AES_BACK)
	ENUM_AUTO(AES_LEFT)
	ENUM_AUTO(AES_RIGHT)
	ENUM_AUTO(AES_NUM_EVADESECTORS)
ENUM_END()


// NOTE: IF YOU CHANGE THIS ENUM, PLEASE CHANGE the array at the top of attackdebugger.cpp - thanks
ENUM_START(COMBAT_STATE)
	ENUM_AUTO(CS_STANDARD)
	ENUM_AUTO(CS_ATTACKING)
	ENUM_AUTO(CS_RECOILING)
	ENUM_AUTO(CS_BLOCKING)
	ENUM_AUTO(CS_DEFLECTING)
	ENUM_AUTO(CS_KO)
	ENUM_AUTO(CS_FLOORED) 
	ENUM_AUTO(CS_RISE_WAIT)
	ENUM_AUTO(CS_BLOCK_STAGGERING)
	ENUM_AUTO(CS_IMPACT_STAGGERING)
	ENUM_AUTO(CS_INSTANTRECOVER)
	ENUM_AUTO(CS_HELD)
	ENUM_AUTO(CS_RECOVERING)
	ENUM_AUTO(CS_DYING)
	ENUM_AUTO(CS_DEAD)
	ENUM_AUTO(CS_COUNT)
ENUM_END()

// NOTE: IF YOU CHANGE THIS ENUM, PLEASE CHANGE the array at the top of attackdebugger.cpp - thanks
ENUM_START(REACTION_APPEARANCE)
	ENUM_AUTO(RA_SPEED_HIGH_LEFT)
	ENUM_AUTO(RA_SPEED_HIGH_RIGHT)
	ENUM_AUTO(RA_SPEED_LOW_LEFT)
	ENUM_AUTO(RA_SPEED_LOW_RIGHT)
	ENUM_AUTO(RA_SPEED_UP)
	ENUM_AUTO(RA_SPEED_DOWN)
	ENUM_AUTO(RA_POWER_HIGH_LEFT)
	ENUM_AUTO(RA_POWER_HIGH_RIGHT)
	ENUM_AUTO(RA_POWER_LOW_LEFT)
	ENUM_AUTO(RA_POWER_LOW_RIGHT)
	ENUM_AUTO(RA_POWER_UP)
	ENUM_AUTO(RA_POWER_DOWN)
	ENUM_AUTO(RA_RANGE_HIGH_LEFT)
	ENUM_AUTO(RA_RANGE_HIGH_RIGHT)
	ENUM_AUTO(RA_RANGE_LOW_LEFT)
	ENUM_AUTO(RA_RANGE_LOW_RIGHT)
	ENUM_AUTO(RA_RANGE_UP)
	ENUM_AUTO(RA_RANGE_DOWN)
	ENUM_AUTO(RA_COUNT)
ENUM_END()

// To be extended when the collision model is developed
ENUM_START(REACTION_ZONE) 
	ENUM_AUTO(RZ_FRONT)
	ENUM_AUTO(RZ_BACK)
ENUM_END()

// Details what the type of recovery is being being performed - top of attackdebugger.cpp too
ENUM_START(RECOVERY_TYPE) 
	ENUM_AUTO(RC_STANDARD)
	ENUM_AUTO(RC_RISING)
	ENUM_AUTO(RC_DEFLECT)
	ENUM_AUTO(RC_GRAB)
	ENUM_AUTO(RC_COUNT)
ENUM_END()

// -- Music
ENUM_START(SELECTION_METHOD)	
	ENUM_AUTO	( MANUAL )
	ENUM_AUTO	( SEQUENTIAL )
	ENUM_AUTO	( RANDOM )
	ENUM_AUTO	( RANDOM_NOWEIGHTS )
	ENUM_AUTO	( SHUFFLED )
ENUM_END()

ENUM_START(TRACK_STOP)
	ENUM_AUTO	( STOP_IMMEDIATE )
	ENUM_AUTO	( STOP_ONLOOP )
	ENUM_AUTO	( STOP_ONMARKER )
	ENUM_AUTO	( STOP_FINISH )
	ENUM_AUTO	( STOP_FADE )
	ENUM_AUTO	( STOP_TIMED )
ENUM_END()

// ----- Audio enums -----

ENUM_START(SPATIALIZATION)
	ENUM_AUTO	(SPATIALIZATION_NONE)		// Ignore 3d positioning
	ENUM_AUTO	(SPATIALIZATION_ATTENUATED)	// Linear volume attenuation based on distance from listener
	ENUM_AUTO	(SPATIALIZATION_HRTF)		// Full volume attenuation and panning
ENUM_END()

ENUM_STARTEX(ENTITY_AUDIO_CHANNEL, ENUM_XML|ENUM_LUA)
	ENUM_AUTO	(CHANNEL_ACTION)
	ENUM_AUTO	(CHANNEL_ACTION_B)
	ENUM_AUTO	(CHANNEL_ACTION_C)
	ENUM_AUTO	(CHANNEL_ACTION_LONG)
	ENUM_AUTO	(CHANNEL_ACTION_STOPLOOPING)
	ENUM_AUTO	(CHANNEL_ACTION_LOOPING)
	ENUM_AUTO	(CHANNEL_MOVEMENT)
	ENUM_AUTO	(CHANNEL_VOICE)
	ENUM_AUTO	(CHANNEL_VOICE_NORMAL)
	ENUM_AUTO	(CHANNEL_VOICE_HIGHPRI)
	ENUM_AUTO	(CHANNEL_IMPACT)
	ENUM_AUTO	(CHANNEL_SLIDING)
	ENUM_AUTO	(CHANNEL_ROLLING)
	ENUM_AUTO	(TOTAL_CHANNELS)
ENUM_END()

ENUM_START(AMBIENT_SOUND_TYPE)
	ENUM_AUTO	(HRTF_LOOPING)
	ENUM_AUTO	(HRTF_INTERMITTENT)
	ENUM_AUTO	(LINEAR_LOOPING)
	ENUM_AUTO	(LINEAR_INTERMITTENT)
	ENUM_AUTO	(GLOBAL_LOOPING)
	ENUM_AUTO	(GLOBAL_INTERMITTENT)
ENUM_END()

ENUM_START(AMBIENT_SOUND_SHAPE)
	ENUM_AUTO	(SPHERE)
	ENUM_AUTO	(BOX)
	ENUM_AUTO	(BOX_AREA)
ENUM_END()

ENUM_START(SELECTION_ORDER)
	ENUM_AUTO	(MUSIC_SEQUENTIAL)
	ENUM_AUTO	(MUSIC_RANDOM_NOREPEAT)
	ENUM_AUTO	(MUSIC_SHUFFLED)
ENUM_END()

ENUM_START(MIXER_PAUSE)
	ENUM_AUTO	(NOPAUSE)
	ENUM_AUTO	(IMMEDIATE_PAUSE)
	ENUM_AUTO	(IMMEDIATE_UNPAUSE)
    ENUM_AUTO	(TRANSITION_PAUSE)
	ENUM_AUTO	(TRANSITION_UNPAUSE)
ENUM_END()

ENUM_START(MIXER_STOP)
	ENUM_AUTO	(NOSTOP)
	ENUM_AUTO	(IMMEDIATE)
	ENUM_AUTO	(TRANSITION)
ENUM_END()

// -- Music control
ENUM_START(TRACKING_ELEMENT_RULE_TYPE)
	ENUM_AUTO(THRESHOLD)
	ENUM_AUTO(THRESHOLD_INVERTED)
	ENUM_AUTO(RANGE)
	ENUM_AUTO(RANGE_INVERTED)
	ENUM_AUTO(DELTA)
ENUM_END()

ENUM_START(TRACKING_ELEMENT_ACTION_TYPE)
	ENUM_AUTO(FIXED_INTENSITY)
	ENUM_AUTO(FIXED_INTENSITY_SUSTAINED)
	ENUM_AUTO(SCALED_INTENSITY)
	ENUM_AUTO(RELATIVE_INTENSITY)
ENUM_END()

// -- Foot fall types
ENUM_START(FOOTSTEP)
	ENUM_AUTO(LEFT_STEP)
	ENUM_AUTO(LEFT_STEP_HEAVY)
	ENUM_AUTO(LEFT_SLIDE_SHORT)
	ENUM_AUTO(LEFT_SLIDE_MEDIUM)
	ENUM_AUTO(LEFT_SLIDE_LONG)
	ENUM_AUTO(RIGHT_STEP)
	ENUM_AUTO(RIGHT_STEP_HEAVY)
	ENUM_AUTO(RIGHT_SLIDE_SHORT)
	ENUM_AUTO(RIGHT_SLIDE_MEDIUM)
	ENUM_AUTO(RIGHT_SLIDE_LONG)
	ENUM_AUTO(BOTH_STEP)
	ENUM_AUTO(BOTH_STEP_HEAVY)
	ENUM_AUTO(CUSTOM1)
	ENUM_AUTO(CUSTOM2)
ENUM_END()

// -- Dynamics
ENUM_START(PROJECTILE_MOTION_TYPE)
	ENUM_AUTO(MOTION_LINEAR)
	ENUM_AUTO(MOTION_SPLINE)
	ENUM_AUTO(MOTION_VECTORLERP)
ENUM_END()

ENUM_START(PROJECTILE_TYPE)
	ENUM_AUTO(PROJECTILE_TYPE_BAZOOKA_ROCKET)
	ENUM_AUTO(PROJECTILE_TYPE_CROSSBOW_BOLT)
	ENUM_AUTO(PROJECTILE_TYPE_BALLISTA_BOLT)
	ENUM_AUTO(PROJECTILE_TYPE_AGEN_SWORD)
	ENUM_AUTO(PROJECTILE_TYPE_KING_LIGHTNINGBALL)
	ENUM_AUTO(PROJECTILE_TYPE_KING_WINGATTACKCROW)
	ENUM_AUTO(PROJECTILE_TYPE_CANNON_BALL)
ENUM_END()

// -- New Effect Enumerations
ENUM_START( EMISSON_VOLUME_TYPE )
	ENUM_AUTO( EV_CUBE )
	ENUM_AUTO( EV_SPHERE )
	ENUM_AUTO( EV_CYLINDER )
ENUM_END()

ENUM_START( EFFECT_BLENDMODE )
	ENUM_AUTO( EBM_OVERWRITE )
	ENUM_AUTO( EBM_LERP )
	ENUM_AUTO( EBM_ADD )
	ENUM_AUTO( EBM_ADD_SRCALPHA )
	ENUM_AUTO( EBM_SUB )
	ENUM_AUTO( EBM_SUB_SRCALPHA )
	ENUM_AUTO( EBM_DISABLED )
ENUM_END()

ENUM_START( EFFECT_CMPFUNC )
	ENUM_AUTO( ECF_NEVER )
	ENUM_AUTO( ECF_LESS )
	ENUM_AUTO( ECF_EQUAL )
	ENUM_AUTO( ECF_LESSEQUAL )
	ENUM_AUTO( ECF_GREATER )
	ENUM_AUTO( ECF_NOTEQUAL )
	ENUM_AUTO( ECF_GREATEREQUAL )
	ENUM_AUTO( ECF_ALWAYS )
ENUM_END()

ENUM_START( EFFECT_RENDER_TYPE )
	ENUM_AUTO( ERT_HIGH_DYNAMIC_RANGE )
	ENUM_AUTO( ERT_HDR_DEPTH_HAZED )
	ENUM_AUTO( ERT_LOW_DYNAMIC_RANGE )
	ENUM_AUTO( ERT_LOW_DYNAMIC_RANGE_RAW )
ENUM_END()


// Combat reaction types
ENUM_START(ARTIFICIALWIND)
	ENUM_AUTO(ARTIFICIAL_HAIR_NONE)
	ENUM_AUTO(ARTIFICIAL_HAIR_HERO)
	ENUM_AUTO(ARTIFICIAL_HAIR_SLEEVE)
	ENUM_AUTO(ARTIFICIAL_HAIR_TASSLE)
	ENUM_AUTO(ARTIFICIAL_HAIR_CHAIN)
	ENUM_AUTO(ARTIFICIAL_HAIR_DUMMY2)
ENUM_END()

// Interaction flags
ENUM_STARTEX_PUBLISH_AS(INTERACTION_PRIORITY, ENUM_LUA, InteractionPriority)
	ENUM_AUTO(NONE)
	ENUM_AUTO(PICKUP)
	ENUM_AUTO(PUSH)
 	ENUM_AUTO(CATCH)
	ENUM_AUTO(USE)
ENUM_END()	

// New camera stuff
ENUM_START(TIME_SCALAR_CURVE_INTERPOLATION_METHOD)
	ENUM_AUTO(TSCIM_STEP)
	ENUM_AUTO(TSCIM_LINEAR)
	ENUM_AUTO(TSCIM_SMOOTHSTEP)
	ENUM_AUTO(TSCIM_SPLINE)
ENUM_END()

// An enum to describe the 'style' level of a character
ENUM_START(HIT_LEVEL)
	ENUM_AUTO(HL_ZERO)
	ENUM_AUTO(HL_ONE)
	ENUM_AUTO(HL_TWO)
	ENUM_AUTO(HL_THREE)
	ENUM_AUTO(HL_FOUR)

	ENUM_AUTO(HL_SPECIAL)
ENUM_END()


///////////////////////////////
//
//		Enum for style 'flavour'
//
//////////////////////////////
ENUM_START(STYLE_TYPE)
	ENUM_AUTO(STYLE_TYPE_SPEED)
	ENUM_AUTO(STYLE_TYPE_POWER)
	ENUM_AUTO(STYLE_TYPE_RANGE)
	ENUM_AUTO(STYLE_TYPE_AERIAL)
	ENUM_AUTO(STYLE_TYPE_MISC)
ENUM_END()

///////////////////////////////
//
//		Combat Combos
//
//////////////////////////////
ENUM_START(STANCE_STYLE)
	ENUM_AUTO(STANCE_STYLE_SPEED)
	ENUM_AUTO(STANCE_STYLE_POWER)
	ENUM_AUTO(STANCE_STYLE_RANGE)
	ENUM_AUTO(STANCE_STYLE_AERIAL)
ENUM_END()


///////////////////////////////
//
//		Hud enums
//
//////////////////////////////
ENUM_START(TIMER_UNITS)
	ENUM_AUTO(TIMER_SECS)
	ENUM_AUTO(TIMER_MINS)
	ENUM_AUTO(TIMER_HOURS)
	ENUM_AUTO(TIMER_DAYS)
ENUM_END()

ENUM_START(TIMER_LEADING_ZERO)
	ENUM_AUTO(TIMER_NEVER)
	ENUM_AUTO(TIMER_ALWAYS)
	ENUM_AUTO(TIMER_DYNAMIC)
ENUM_END()

ENUM_START(HORIZONTAL_JUSTFICATION)
	ENUM_AUTO(JUSTIFY_LEFT)
	ENUM_AUTO(JUSTIFY_CENTRE)
	ENUM_AUTO(JUSTIFY_RIGHT)
ENUM_END()

ENUM_START(VERTICAL_JUSTIFICATION)
	ENUM_AUTO(JUSTIFY_TOP)
	ENUM_AUTO(JUSTIFY_MIDDLE)
	ENUM_AUTO(JUSTIFY_BOTTOM)
ENUM_END()

// water stuff
ENUM_STARTEX(WAVE_TYPE, ENUM_XML|ENUM_LUA)
	ENUM_AUTO	(WAVETYPE_DIRECTIONAL)
	ENUM_AUTO	(WAVETYPE_CIRCULAR)
	ENUM_AUTO	(WAVETYPE_ATTACK0)
	ENUM_AUTO	(WAVETYPE_ATTACK1)
	ENUM_AUTO	(WAVETYPE_ATTACK2)
ENUM_END()


///////////////////////////////
//
//	Ranged WeaponType Enum
//
//////////////////////////////
ENUM_STARTEX(RANGED_WEAPON_TYPE, ENUM_XML|ENUM_LUA)
	ENUM_AUTO(RWT_NONE)	//Default.
	ENUM_AUTO(RWT_CROSSBOW)
	ENUM_AUTO(RWT_BAZOOKA)
	ENUM_AUTO(RWT_NUMTYPES)
	//Add here as needed.
ENUM_END()

ENUM_STARTEX(ATTACK_TYPE, ENUM_XML|ENUM_LUA)
	ENUM_AUTO	(ATTACKTYPE_ATTACK0)
	ENUM_AUTO	(ATTACKTYPE_ATTACK1)
	ENUM_AUTO	(ATTACKTYPE_ATTACK2)
ENUM_END()

#endif	//_ENUMLIST_H
